<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>CSS Grid 格線佈局</title>
    <link href="/post/Grid/"/>
    <url>/post/Grid/</url>
    
    <content type="html"><![CDATA[<h1>前言</h1><p><a href="https://b-l-u-e-b-e-r-r-y.github.io/post/Flexbox/">Flexbox</a> 的出現讓很多人捨棄了舊有的排版方式，大多數的時候我也還是使用 Flexbox，但最近遇到的需求版型比較複雜，於是開始學習 Grid。</p><p>我認為 Grid 很適合用在 Dashboard 的排版，比如：<br><img src="/images/grid/grid-dashboard.png" alt=""></p><p>不是說 Flexbox 無法做到這個版型，而是用 Grid 來排真的比較快又簡單很多。</p><h2 id="Google-Chrome-的格線預覽">Google Chrome 的格線預覽</h2><p>開始前先來介紹實用的 Google Chrome 小工具。有一個版型長這樣：</p><p><img src="/images/grid/grid-normal.jpeg" alt=""></p><p>藉由 F12 開發者工具右上角的功能，可以看到原本的格線佈局：</p><p><img src="/images/grid/grid-brower.png" alt=""></p><h1>開始使用</h1><p>先讓包在最外層的父元素變成 Grid Container：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.wrapper</span> &#123;<br>    <span class="hljs-attribute">display</span>: grid;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="設定-Grid-Container">設定 Grid Container</h2><p>要設定 Grid Container，最基本會用到 <code>grid-template-rows</code> / <code>grid-template-columns</code> 這兩個屬性。</p><p><img src="/images/grid/grid-01.png" alt="grid-template-rows 是縱軸，grid-template-columns 則是橫軸"></p><h3 id="明確定義寬高">明確定義寬高</h3><p>簡單來說就是使用 px、%、vw 或 vh 去設定寬高：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.wrapper</span> &#123;<br>    <span class="hljs-attribute">display</span>: grid;<br>    grid-template-<span class="hljs-attribute">columns</span>: <span class="hljs-number">200px</span> <span class="hljs-number">200px</span> <span class="hljs-number">200px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>來切個常見的 layout。</p><p><strong>HTML</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>menu<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>nav<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>sidebar<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>content<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>CSS</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.wrapper</span> &#123;<br>    <span class="hljs-attribute">display</span>: grid;<br>    grid-template-rows: <span class="hljs-number">60px</span> <span class="hljs-number">600px</span>;<br>    grid-template-<span class="hljs-attribute">columns</span>: <span class="hljs-number">200px</span> <span class="hljs-number">1000px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.wrapper</span> <span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-attribute">border</span>: solid <span class="hljs-number">1px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p class="codepen" data-height="300" data-default-tab="html,result" data-slug-hash="YzVyaeX" data-user="Priscilla_Lin" style="height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;">  <span>See the Pen <a href="https://codepen.io/Priscilla_Lin/pen/YzVyaeX">  Grid 01</a> by Priscilla Lin (<a href="https://codepen.io/Priscilla_Lin">@Priscilla_Lin</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script><h3 id="用等分決定寬高">用等分決定寬高</h3><p>這時候就是使用只有在 Grid 出現的格線單位：<code>fr</code>。1fr 是一等分的意思，2fr 就是兩等分，以此類推。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.wrapper</span> &#123;<br>    <span class="hljs-attribute">display</span>: grid;<br>    grid-template-rows: <span class="hljs-number">2</span>fr <span class="hljs-number">1</span>fr <span class="hljs-number">1</span>fr;<br>    grid-template-<span class="hljs-attribute">columns</span>: <span class="hljs-number">2</span>fr <span class="hljs-number">1</span>fr <span class="hljs-number">1</span>fr;<br>&#125;<br></code></pre></td></tr></table></figure><p>也可以和自定義的數值混用，這樣的話就會扣掉固定數值，剩下的寬(高)再平分。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.wrapper</span> &#123;<br>    <span class="hljs-attribute">display</span>: grid;<br>    grid-template-rows: <span class="hljs-number">2</span>fr <span class="hljs-number">1</span>fr;<br>    grid-template-<span class="hljs-attribute">columns</span>: <span class="hljs-number">200px</span> <span class="hljs-number">1</span>fr <span class="hljs-number">1</span>fr;<br>&#125;<br></code></pre></td></tr></table></figure><p>設定成 Grid Container 後，寬度預設是滿版，所以 columns 會以 100 vw 下去切成好幾等分。</p><p>但 rows 就不同了，它會把子元素的高度當成依據，去計算 1fr 的高度是多少。如果同一行中有不同的高度，則以高度最大的那個子元素為準。</p><p class="codepen" data-height="300" data-default-tab="html,result" data-slug-hash="gOWaedg" data-user="Priscilla_Lin" style="height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;">  <span>See the Pen <a href="https://codepen.io/Priscilla_Lin/pen/gOWaedg">  Grid 02</a> by Priscilla Lin (<a href="https://codepen.io/Priscilla_Lin">@Priscilla_Lin</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><h3 id="Repeat">Repeat</h3><p><code>Repeat(格數, 格寬/高)</code></p><p>如果 Row 或 Column 的寬度是相同的，而且需要好幾格，這時候就可以用 <code>Repeat</code>：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.wrapper</span> &#123;<br>    <span class="hljs-attribute">display</span>: grid;<br>    grid-template-rows: <span class="hljs-built_in">Repeat</span>(<span class="hljs-number">10</span>, <span class="hljs-number">50px</span>);<br>    grid-template-<span class="hljs-attribute">columns</span>: <span class="hljs-built_in">Repeat</span>(<span class="hljs-number">10</span>, <span class="hljs-number">1</span>fr);<br>&#125;<br></code></pre></td></tr></table></figure><p class="codepen" data-height="300" data-default-tab="html,result" data-slug-hash="rNjxRRX" data-user="Priscilla_Lin" style="height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;">  <span>See the Pen <a href="https://codepen.io/Priscilla_Lin/pen/rNjxRRX">  Grid repeat</a> by Priscilla Lin (<a href="https://codepen.io/Priscilla_Lin">@Priscilla_Lin</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><h3 id="minmax">minmax</h3><p><code>minmax(最小值, 最大值)</code></p><p><code>minmax</code> 可以指定最小值和最大值，在設計響應式頁面很方便：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.wrapper</span> &#123;<br>    <span class="hljs-attribute">display</span>: grid;<br>    grid-template-rows: <span class="hljs-built_in">minmax</span>(<span class="hljs-number">50px</span>, <span class="hljs-number">100px</span>);<br>    grid-template-<span class="hljs-attribute">columns</span>: <span class="hljs-built_in">minmax</span>(<span class="hljs-number">50px</span>, <span class="hljs-number">100px</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>以上面的例子來看，一般 PC 的情況下 columns 會呈現 100px，隨著頁面寬度變化慢慢縮小，如果擠到不能再擠了，就會維持最小寬度 50px。rows 也是一樣的原理。</p><p class="codepen" data-height="300" data-default-tab="html,result" data-slug-hash="zYwOjeL" data-user="Priscilla_Lin" style="height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;">  <span>See the Pen <a href="https://codepen.io/Priscilla_Lin/pen/zYwOjeL">  Grid minmax</a> by Priscilla Lin (<a href="https://codepen.io/Priscilla_Lin">@Priscilla_Lin</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><h2 id="客製化區塊">客製化區塊</h2><p>要做到客製化區塊，可以靠這兩種設定方式做到：</p><h3 id="grid-template-areas">grid-template-areas</h3><p><code>grid-template-areas</code> 可以單獨定義每一格，但有幾點必須注意：</p><ul><li>區塊如果要合併，必須要連續，像ㄇ形或L型是不行的</li><li>定義完後，子元素的 class 必須加入 grid-area 指定區塊</li><li>使用 <code>.</code> 可以留空區塊</li></ul><p><strong>HTML</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav&quot;</span>&gt;</span>nav<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sidebar&quot;</span>&gt;</span>sidebar<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content-01&quot;</span>&gt;</span>content-01<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content-02&quot;</span>&gt;</span>content-02<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content-03&quot;</span>&gt;</span>content-03<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>CSS</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.wrapper</span> &#123;<br>    <span class="hljs-attribute">display</span>: grid;<br>    grid-template-rows: <span class="hljs-number">60px</span> <span class="hljs-number">300px</span> <span class="hljs-number">300px</span>;<br>    grid-template-<span class="hljs-attribute">columns</span>: <span class="hljs-number">200px</span> <span class="hljs-number">500px</span> <span class="hljs-number">500px</span>;<br>    grid-template-areas: <br>    <span class="hljs-string">&quot;nav nav nav&quot;</span><br>    <span class="hljs-string">&quot;sidebar content-01 content-02&quot;</span><br>    <span class="hljs-string">&quot;sidebar content-03 content-04&quot;</span>;<br><br>    <span class="hljs-comment">/* (x) 倒L型 nav</span><br><span class="hljs-comment">        * grid-template-areas: </span><br><span class="hljs-comment">    *   &quot;nav nav nav&quot;</span><br><span class="hljs-comment">    *   &quot;nav content-01 content-02&quot;</span><br><span class="hljs-comment">    *   &quot;nav content-03 content-04&quot;;</span><br><span class="hljs-comment">    */</span><br>&#125;<br><br><span class="hljs-selector-class">.wrapper</span> <span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-attribute">border</span>: solid <span class="hljs-number">1px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.nav</span> &#123;<br>    grid-area: nav;<br>&#125;<br><br><span class="hljs-selector-class">.sidebar</span> &#123;<br>    grid-area: sidebar;<br>&#125;<br><br><span class="hljs-selector-class">.content-01</span> &#123;<br>    grid-area: content-<span class="hljs-number">01</span>;<br>&#125;<br><br><span class="hljs-selector-class">.content-02</span> &#123;<br>    grid-area: content-<span class="hljs-number">02</span>;<br>&#125;<br><br><span class="hljs-selector-class">.content-03</span> &#123;<br>    grid-area: content-<span class="hljs-number">03</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p class="codepen" data-height="300" data-default-tab="html,result" data-slug-hash="PomPRxm" data-user="Priscilla_Lin" style="height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;">  <span>See the Pen <a href="https://codepen.io/Priscilla_Lin/pen/PomPRxm">  Grid grid-template-areas</a> by Priscilla Lin (<a href="https://codepen.io/Priscilla_Lin">@Priscilla_Lin</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><h3 id="各個-Class-分別指定">各個 Class 分別指定</h3><p>這邊也分成兩種方式：</p><ul><li><strong>grid-[row/column]-start / grid-[row/column]-end</strong></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">grid-row-start: <span class="hljs-number">1</span>;<br>grid-row-end: <span class="hljs-number">2</span>;<br>grid-column-start: <span class="hljs-number">2</span>;<br>grid-column-end: <span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure><ul><li><strong>grid-[row/column]: start / end</strong></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">grid-row: <span class="hljs-number">1</span> / <span class="hljs-number">2</span>;<br>grid-column: <span class="hljs-number">2</span> / <span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure><p>數字的部分是這樣數過去，由左而右，由上到下，從 1 開始數：</p><p><img src="/images/grid/grid-02.png" alt=""></p><p>這邊有兩個特殊用法：</p><ul><li><strong>span</strong>：跨越幾個區塊</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">grid-row: <span class="hljs-number">1</span> / span <span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure><ul><li><strong>auto</strong>：設定 auto 通常為 start 值 +1</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">grid-row: <span class="hljs-number">1</span> / auto;<br></code></pre></td></tr></table></figure><p><strong>CSS</strong><br>註解和未註解的部分是同樣效果不同寫法（HTML 沿用上個範例）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.wrapper</span> &#123;<br>    <span class="hljs-attribute">display</span>: grid;<br>    grid-template-rows: <span class="hljs-number">60px</span> <span class="hljs-number">300px</span> <span class="hljs-number">300px</span>;<br>    grid-template-<span class="hljs-attribute">columns</span>: <span class="hljs-number">200px</span> <span class="hljs-number">500px</span> <span class="hljs-number">500px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.wrapper</span> <span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-attribute">border</span>: solid <span class="hljs-number">1px</span>;<br>&#125;<br><br><span class="hljs-comment">/* -------------------- */</span><br><br><span class="hljs-comment">/* .nav &#123;</span><br><span class="hljs-comment">    grid-row-start: 1;</span><br><span class="hljs-comment">    grid-row-end: 2;</span><br><span class="hljs-comment">    grid-column-start: 1;</span><br><span class="hljs-comment">    grid-column-end: span 3;</span><br><span class="hljs-comment">&#125; */</span><br><br><span class="hljs-selector-class">.nav</span> &#123;<br>    grid-row: <span class="hljs-number">1</span> / <span class="hljs-number">2</span>;<br>    grid-column: <span class="hljs-number">1</span> / span <span class="hljs-number">3</span>;<br>&#125;<br><br><span class="hljs-comment">/* -------------------- */</span><br><br><span class="hljs-comment">/* .sidebar &#123;</span><br><span class="hljs-comment">    grid-row-start: 2;</span><br><span class="hljs-comment">    grid-row-end: 4;</span><br><span class="hljs-comment">    grid-column-start: 1;</span><br><span class="hljs-comment">    grid-column-end: 2;</span><br><span class="hljs-comment">&#125; */</span><br><br><span class="hljs-selector-class">.sidebar</span> &#123;<br>    grid-row: <span class="hljs-number">2</span> / <span class="hljs-number">4</span>;<br>    grid-column: <span class="hljs-number">1</span> / <span class="hljs-number">2</span>;<br>&#125;<br><br><span class="hljs-comment">/* -------------------- */</span><br><br><span class="hljs-comment">/* .content-01 &#123;</span><br><span class="hljs-comment">    grid-row-start: 2;</span><br><span class="hljs-comment">    grid-row-end: 3;</span><br><span class="hljs-comment">    grid-column-start: 2;</span><br><span class="hljs-comment">    grid-column-end: 3;</span><br><span class="hljs-comment">&#125; */</span><br><br><span class="hljs-selector-class">.content-01</span> &#123;<br>    grid-row: <span class="hljs-number">2</span> / <span class="hljs-number">3</span>;<br>    grid-column: <span class="hljs-number">2</span> / <span class="hljs-number">3</span>;<br>&#125;<br><br><span class="hljs-comment">/* -------------------- */</span><br><br><span class="hljs-comment">/* .content-02 &#123;</span><br><span class="hljs-comment">    grid-row-start: 2;</span><br><span class="hljs-comment">    grid-row-end: 3;</span><br><span class="hljs-comment">    grid-column-start: 3;</span><br><span class="hljs-comment">    grid-column-end: 4;</span><br><span class="hljs-comment">&#125; */</span><br><br><span class="hljs-selector-class">.content-02</span> &#123;<br>    grid-row: <span class="hljs-number">2</span> / <span class="hljs-number">3</span>;<br>    grid-column: <span class="hljs-number">3</span> / <span class="hljs-number">4</span>;<br>&#125;<br><br><span class="hljs-comment">/* -------------------- */</span><br><br><span class="hljs-comment">/* .content-03 &#123;</span><br><span class="hljs-comment">    grid-row-start: 3;</span><br><span class="hljs-comment">    grid-row-end: 4;</span><br><span class="hljs-comment">    grid-column-start: 3;</span><br><span class="hljs-comment">    grid-column-end: 4;</span><br><span class="hljs-comment">&#125; */</span><br><br><span class="hljs-selector-class">.content-03</span> &#123;<br>    grid-row: <span class="hljs-number">3</span> / <span class="hljs-number">4</span>;<br>    grid-column: <span class="hljs-number">3</span> / <span class="hljs-number">4</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p class="codepen" data-height="300" data-default-tab="html,result" data-slug-hash="rNmOKLj" data-user="Priscilla_Lin" style="height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;">  <span>See the Pen <a href="https://codepen.io/Priscilla_Lin/pen/rNmOKLj">  Grid assign block in child</a> by Priscilla Lin (<a href="https://codepen.io/Priscilla_Lin">@Priscilla_Lin</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><h2 id="grid-auto-rows-grid-auto-columns">grid-auto-rows / grid-auto-columns</h2><p>如果只是想要簡單設定 rows 或 columns，可以用 <code>grid-auto-rows</code> 或 <code>grid-auto-columns</code>。</p><h3 id="grid-auto-rows">grid-auto-rows</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.wrapper</span> &#123;<br>    <span class="hljs-attribute">display</span>: grid;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">50vw</span>;<br>    grid-template-<span class="hljs-attribute">columns</span>: <span class="hljs-number">1</span>fr <span class="hljs-number">1</span>fr <span class="hljs-number">1</span>fr;<br>    grid-<span class="hljs-attribute">auto</span>-rows: <span class="hljs-number">100px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p class="codepen" data-height="300" data-default-tab="html,result" data-slug-hash="VwbvBvJ" data-user="Priscilla_Lin" style="height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;">  <span>See the Pen <a href="https://codepen.io/Priscilla_Lin/pen/VwbvBvJ">  Grid auto rows</a> by Priscilla Lin (<a href="https://codepen.io/Priscilla_Lin">@Priscilla_Lin</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><h3 id="grid-auto-columns">grid-auto-columns</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.wrapper</span> &#123;<br>    <span class="hljs-attribute">display</span>: grid;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">500px</span>;<br>    grid-<span class="hljs-attribute">auto</span>-<span class="hljs-attribute">columns</span>: <span class="hljs-number">200px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p class="codepen" data-height="300" data-default-tab="html,result" data-slug-hash="QWpPJyE" data-user="Priscilla_Lin" style="height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;">  <span>See the Pen <a href="https://codepen.io/Priscilla_Lin/pen/QWpPJyE">  Grid auto columns</a> by Priscilla Lin (<a href="https://codepen.io/Priscilla_Lin">@Priscilla_Lin</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><h2 id="gap">gap</h2><p>gap 各區塊之間的間距，可以一起設定，也可以 rows 和 columns 分開設定。</p><h3 id="一起設定-gap">一起設定 gap</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.wrapper</span> &#123;<br>    <span class="hljs-attribute">display</span>: grid;<br>    grid-template-<span class="hljs-attribute">columns</span>: <span class="hljs-number">1</span>fr <span class="hljs-number">1</span>fr <span class="hljs-number">1</span>fr;<br>    grid-template-rows: <span class="hljs-number">1</span>fr <span class="hljs-number">1</span>fr <span class="hljs-number">1</span>fr;<br>    grid-gap: <span class="hljs-number">10px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="分開設定-gap">分開設定 gap</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.wrapper</span> &#123;<br>    <span class="hljs-attribute">display</span>: grid;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">50vw</span>;<br>    grid-template-<span class="hljs-attribute">columns</span>: <span class="hljs-number">1</span>fr <span class="hljs-number">1</span>fr <span class="hljs-number">1</span>fr;<br>    grid-<span class="hljs-attribute">auto</span>-rows: <span class="hljs-number">100px</span>;<br>    grid-row-gap: <span class="hljs-number">10px</span>;<br>    grid-<span class="hljs-attribute">column-gap</span>: <span class="hljs-number">0px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p class="codepen" data-height="300" data-default-tab="html,result" data-slug-hash="VwbvBKo" data-user="Priscilla_Lin" style="height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;">  <span>See the Pen <a href="https://codepen.io/Priscilla_Lin/pen/VwbvBKo">  Grid gap</a> by Priscilla Lin (<a href="https://codepen.io/Priscilla_Lin">@Priscilla_Lin</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><h1>Grid 對不同瀏覽器的支援</h1><p>Grid 目前的支援不像 Flexbox 那麼好，不過主流瀏覽器幾乎都有支援。</p><p><a href="https://caniuse.com/css-grid">CSS Grid Layout (level 1) | Can I use… Support tables for HTML5, CSS3, etc</a></p>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
      <tag>Grid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 Node.js + Puppeteer 來爬蟲吧！[通過 PTT 八卦板年齡限制]</title>
    <link href="/post/PTTCrawler02/"/>
    <url>/post/PTTCrawler02/</url>
    
    <content type="html"><![CDATA[<h1>前言</h1><p>如果使用前一篇<a href="https://b-l-u-e-b-e-r-r-y.github.io/post/PTTCrawler/">使用 Node.js 來爬蟲吧！[PTT 股票板]</a>程式碼，試著將網址改成八卦板運行，會發現爬蟲抓不到資料的問題。</p><p>這是因為第一次訪問八卦板時，PTT 會先跳出年齡驗證，使用者如果按下已滿 18 歲的按鈕，PTT 就會將紀錄存在 Cookies。</p><p><img src="/images/ptt-crawler/ptt3.jpg" alt=""></p><p>當然也可以在 requset 時帶 cookie，不過本篇文章會講解使用自動化測試工具 <a href="https://github.com/puppeteer/puppeteer">Puppeteer</a> 來實作這個功能。</p><h1>實作</h1><h2 id="安裝-Puppeteer">安裝 Puppeteer</h2><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> i puppeteer<br></code></pre></td></tr></table></figure><h2 id="引入-Puppeteer">引入 Puppeteer</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> puppeteer = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;puppeteer&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="程式碼">程式碼</h2><p>下面程式碼主要功能是先 request 八卦板，待跳出年齡驗證的頁面後，使用 Puppeteer 去模擬使用者點擊已滿18歲按鈕，並取得跳轉後的新頁面 content。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> pttUrl = <span class="hljs-string">&#x27;https://www.ptt.cc/bbs/Gossiping/index.html&#x27;</span>;<br>request(&#123;<br>    <span class="hljs-attr">url</span>: pttUrl,<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;GET&quot;</span><br>&#125;, <span class="hljs-keyword">async</span> (error, res, body) =&gt; &#123;<br>    <span class="hljs-keyword">if</span> (error || !body) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">let</span> $ = cheerio.load(body); <span class="hljs-comment">// 載入 body</span><br>    <span class="hljs-keyword">const</span> browser = <span class="hljs-keyword">await</span> puppeteer.launch(&#123; <span class="hljs-attr">headless</span>: <span class="hljs-literal">false</span> &#125;);  <span class="hljs-comment">// 啟動瀏覽器，headless 設定為 false 可以看到瀏覽器運作的情況，true 為無頭瀏覽器</span><br>    <span class="hljs-keyword">const</span> page = <span class="hljs-keyword">await</span> browser.newPage();<br>    <span class="hljs-keyword">await</span> page.goto(pttUrl);<br>    <span class="hljs-keyword">const</span> buttonSelector = <span class="hljs-string">&#x27;body &gt; div.bbs-screen.bbs-content.center.clear &gt; form &gt; div:nth-child(2) &gt; button&#x27;</span>;  <span class="hljs-comment">// 已滿18歲按鈕 selector</span><br>    <span class="hljs-keyword">await</span> page.click(buttonSelector);  <span class="hljs-comment">// 按下按鈕</span><br>    <span class="hljs-keyword">const</span> content = <span class="hljs-keyword">await</span> page.content();  <span class="hljs-comment">// 取得新頁面的內容</span><br>    <span class="hljs-keyword">await</span> browser.close();  <span class="hljs-comment">// 關閉瀏覽器</span><br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="完整程式碼">完整程式碼</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> request = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;request&quot;</span>);<br><span class="hljs-keyword">const</span> cheerio = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;cheerio&quot;</span>);<br><span class="hljs-keyword">const</span> puppeteer = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;puppeteer&#x27;</span>);<br><br><span class="hljs-keyword">const</span> pttCrawler = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> pttUrl = <span class="hljs-string">&#x27;https://www.ptt.cc/bbs/Gossiping/index.html&#x27;</span>;<br>    request(&#123;<br>        <span class="hljs-attr">url</span>: pttUrl,<br>        <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;GET&quot;</span><br>    &#125;, <span class="hljs-keyword">async</span> (error, res, body) =&gt; &#123;<br>        <span class="hljs-keyword">if</span> (error || !body) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">let</span> $ = cheerio.load(body); <span class="hljs-comment">// 載入 body</span><br>        <span class="hljs-keyword">const</span> browser = <span class="hljs-keyword">await</span> puppeteer.launch(&#123; <span class="hljs-attr">headless</span>: <span class="hljs-literal">false</span> &#125;);  <span class="hljs-comment">// 啟動瀏覽器，headless 設定為 false 可以看到瀏覽器運作的情況，true 為無頭瀏覽器</span><br>        <span class="hljs-keyword">const</span> page = <span class="hljs-keyword">await</span> browser.newPage();<br>        <span class="hljs-keyword">await</span> page.goto(pttUrl);<br>        <span class="hljs-keyword">const</span> buttonSelector = <span class="hljs-string">&#x27;body &gt; div.bbs-screen.bbs-content.center.clear &gt; form &gt; div:nth-child(2) &gt; button&#x27;</span>;  <span class="hljs-comment">// 已滿18歲按鈕 selector</span><br>        <span class="hljs-keyword">await</span> page.click(buttonSelector);  <span class="hljs-comment">// 按下按鈕</span><br><br>        <span class="hljs-keyword">const</span> content = <span class="hljs-keyword">await</span> page.content();  <span class="hljs-comment">// 取得新頁面的內容</span><br>        $ = cheerio.load(content);<br><br>        <span class="hljs-keyword">const</span> result = []; <span class="hljs-comment">// 建立一個儲存結果的容器</span><br>        <span class="hljs-keyword">const</span> list = $(<span class="hljs-string">&quot;.r-list-container .r-ent&quot;</span>);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; list.length; i++) &#123;<br>            <span class="hljs-keyword">const</span> title = list.eq(i).find(<span class="hljs-string">&#x27;.title a&#x27;</span>).text();<br>            <span class="hljs-keyword">const</span> author = list.eq(i).find(<span class="hljs-string">&#x27;.meta .author&#x27;</span>).text();<br>            <span class="hljs-keyword">const</span> date = list.eq(i).find(<span class="hljs-string">&#x27;.meta .date&#x27;</span>).text();<br>            <span class="hljs-keyword">const</span> link = list.eq(i).find(<span class="hljs-string">&#x27;.title a&#x27;</span>).attr(<span class="hljs-string">&#x27;href&#x27;</span>);<br><br>            result.push(&#123; title, author, date, link &#125;);<br>        &#125;<br><br>        <span class="hljs-built_in">console</span>.log(result);<br>        <span class="hljs-keyword">await</span> browser.close();  <span class="hljs-comment">// 關閉瀏覽器</span><br>    &#125;);<br>&#125;;<br><br>pttCrawler();<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>node.js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Javascript</tag>
      
      <tag>w3HexSchool</tag>
      
      <tag>node.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【用 JS 寫一個 Discord Bot！】02 音樂機器人</title>
    <link href="/post/DiscordBot02/"/>
    <url>/post/DiscordBot02/</url>
    
    <content type="html"><![CDATA[<h1>前言</h1><p>今天我們來寫一個具有以下功能的音樂機器人：</p><ul><li>播放 YouTube 歌曲</li><li>暫停/恢復播放</li><li>跳過歌曲</li><li>歌曲隊列</li></ul><p>如果還不知道怎麼建立機器人，可以參考我之前寫的這篇文章：<a href="https://b-l-u-e-b-e-r-r-y.github.io/post/DiscordBot01/">【用 JS 寫一個 Discord Bot！】01 建立機器人</a>。</p><h1>實作</h1><h2 id="安裝套件">安裝套件</h2><p>要完成這些功能，除了需要 <a href="https://github.com/discordjs/discord.js/">Discord.js</a> 套件以外，還必須安裝下面這三個套件。</p><ul><li><h3 id="ffmpeg-static"><a href="https://github.com/eugeneware/ffmpeg-static">ffmpeg-static</a></h3></li></ul><p>執行音樂的轉檔、串流功能</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livescript">$ <span class="hljs-built_in">npm</span> install ffmpeg-<span class="hljs-keyword">static</span><br></code></pre></td></tr></table></figure><ul><li><h3 id="discordjs-opus"><a href="https://github.com/discordjs/opus">discordjs/opus</a></h3></li></ul><p>Opus 編碼器</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">$ <span class="hljs-built_in">npm</span> install @discordjs/opus<br></code></pre></td></tr></table></figure><ul><li><h3 id="node-ytdl-core"><a href="https://github.com/fent/node-ytdl-core">node-ytdl-core</a></h3></li></ul><p>執行下載 YouTube 影片的功能</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">$ npm <span class="hljs-keyword">install</span> ytdl-core<br></code></pre></td></tr></table></figure><h2 id="開始編寫">開始編寫</h2><h3 id="建立-config-json">建立 config.json</h3><p>在開始之前，我們先在專案中建立 config.json，放一些常用配置。</p><p><code>prefix</code> 設定指令的前綴字。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;prefix&quot;</span>: <span class="hljs-string">&quot;!!&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="編寫-discord-js">編寫 discord.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123; Client &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;discord.js&#x27;</span>);<br><span class="hljs-keyword">const</span> ytdl = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;ytdl-core&#x27;</span>);<br><span class="hljs-keyword">const</span> &#123; token &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./token.json&#x27;</span>);<br><span class="hljs-keyword">const</span> &#123; prefix &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./config.json&#x27;</span>);<br><span class="hljs-keyword">const</span> client = <span class="hljs-keyword">new</span> Client();<br><br><span class="hljs-comment">// 建立一個類別來管理 Property 及 Method</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Music</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 下面的物件都是以 Discord guild id 當 key，例如：</span><br><span class="hljs-comment">         * this.isPlaying = &#123;</span><br><span class="hljs-comment">         *     724145832802385970: false</span><br><span class="hljs-comment">         * &#125;</span><br><span class="hljs-comment">         */</span><br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 機器人是否正在播放音樂</span><br><span class="hljs-comment">         * this.isPlaying = &#123;</span><br><span class="hljs-comment">         *     724145832802385970: false</span><br><span class="hljs-comment">         * &#125;</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-built_in">this</span>.isPlaying = &#123;&#125;;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 等待播放的音樂隊列，例如：</span><br><span class="hljs-comment">         * this.queue = &#123;</span><br><span class="hljs-comment">         *     724145832802385970: [&#123;</span><br><span class="hljs-comment">         *         name: &#x27;G.E.M.鄧紫棋【好想好想你 Missing You】Official Music Video&#x27;,</span><br><span class="hljs-comment">         *         url: &#x27;https://www.youtube.com/watch?v=P6QXo88IG2c&amp;ab_channel=GEM%E9%84%A7%E7%B4%AB%E6%A3%8B&#x27;</span><br><span class="hljs-comment">         *     &#125;]</span><br><span class="hljs-comment">         * &#125;</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-built_in">this</span>.queue = &#123;&#125;;<br><br>        <span class="hljs-comment">// https://discord.js.org/#/docs/main/stable/class/VoiceConnection</span><br>        <span class="hljs-built_in">this</span>.connection = &#123;&#125;;<br><br>        <span class="hljs-comment">// https://discord.js.org/#/docs/main/stable/class/StreamDispatcher</span><br>        <span class="hljs-built_in">this</span>.dispatcher = &#123;&#125;;<br>    &#125;<br><br>    <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">join</span>(<span class="hljs-params">msg</span>)</span> &#123;<br><br>        <span class="hljs-comment">// 如果使用者正在頻道中</span><br>        <span class="hljs-keyword">if</span> (msg.member.voice.channel !== <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// Bot 加入語音頻道</span><br>            <span class="hljs-built_in">this</span>.connection[msg.guild.id] = <span class="hljs-keyword">await</span> msg.member.voice.channel.join();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            msg.channel.send(<span class="hljs-string">&#x27;請先進入語音頻道&#x27;</span>);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">play</span>(<span class="hljs-params">msg</span>)</span> &#123;<br><br>        <span class="hljs-comment">// 語音群的 ID</span><br>        <span class="hljs-keyword">const</span> guildID = msg.guild.id;<br><br>        <span class="hljs-comment">// 如果 Bot 還沒加入該語音群的語音頻道</span><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.connection[guildID]) &#123;<br>            msg.channel.send(<span class="hljs-string">&#x27;請先將機器人 `!!join` 加入頻道&#x27;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 如果 Bot leave 後又未加入語音頻道</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.connection[guildID].status === <span class="hljs-number">4</span>) &#123;<br>            msg.channel.send(<span class="hljs-string">&#x27;請先將機器人 `!!join` 重新加入頻道&#x27;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 處理字串，將 !!play 字串拿掉，只留下 YouTube 網址</span><br>        <span class="hljs-keyword">const</span> musicURL = msg.content.replace(<span class="hljs-string">`<span class="hljs-subst">$&#123;prefix&#125;</span>play`</span>, <span class="hljs-string">&#x27;&#x27;</span>).trim();<br><br>        <span class="hljs-keyword">try</span> &#123;<br><br>            <span class="hljs-comment">// 取得 YouTube 影片資訊</span><br>            <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> ytdl.getInfo(musicURL);<br>            <span class="hljs-keyword">const</span> info = res.videoDetails;<br><br>            <span class="hljs-comment">// 將歌曲資訊加入隊列</span><br>            <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.queue[guildID]) &#123;<br>                <span class="hljs-built_in">this</span>.queue[guildID] = [];<br>            &#125;<br><br>            <span class="hljs-built_in">this</span>.queue[guildID].push(&#123;<br>                <span class="hljs-attr">name</span>: info.title,<br>                <span class="hljs-attr">url</span>: musicURL<br>            &#125;);<br><br>            <span class="hljs-comment">// 如果目前正在播放歌曲就加入隊列，反之則播放歌曲</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.isPlaying[guildID]) &#123;<br>                msg.channel.send(<span class="hljs-string">`歌曲加入隊列：<span class="hljs-subst">$&#123;info.title&#125;</span>`</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-built_in">this</span>.isPlaying[guildID] = <span class="hljs-literal">true</span>;<br>                <span class="hljs-built_in">this</span>.playMusic(msg, guildID, <span class="hljs-built_in">this</span>.queue[guildID][<span class="hljs-number">0</span>]);<br>            &#125;<br><br>        &#125; <span class="hljs-keyword">catch</span>(e) &#123;<br>            <span class="hljs-built_in">console</span>.log(e);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">playMusic</span>(<span class="hljs-params">msg, guildID, musicInfo</span>)</span> &#123;<br><br>        <span class="hljs-comment">// 提示播放音樂</span><br>        msg.channel.send(<span class="hljs-string">`播放音樂：<span class="hljs-subst">$&#123;musicInfo.name&#125;</span>`</span>);<br><br>        <span class="hljs-comment">// 播放音樂</span><br>        <span class="hljs-built_in">this</span>.dispatcher[guildID] = <span class="hljs-built_in">this</span>.connection[guildID].play(ytdl(musicInfo.url, &#123; <span class="hljs-attr">filter</span>: <span class="hljs-string">&#x27;audioonly&#x27;</span> &#125;));<br><br>        <span class="hljs-comment">// 把音量降 50%，不然第一次容易被機器人的音量嚇到 QQ</span><br>        <span class="hljs-built_in">this</span>.dispatcher[guildID].setVolume(<span class="hljs-number">0.5</span>);<br><br>        <span class="hljs-comment">// 移除 queue 中目前播放的歌曲</span><br>        <span class="hljs-built_in">this</span>.queue[guildID].shift();<br><br>        <span class="hljs-comment">// 歌曲播放結束時的事件</span><br>        <span class="hljs-built_in">this</span>.dispatcher[guildID].on(<span class="hljs-string">&#x27;finish&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br><br>            <span class="hljs-comment">// 如果隊列中有歌曲</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.queue[guildID].length &gt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-built_in">this</span>.playMusic(msg, guildID, <span class="hljs-built_in">this</span>.queue[guildID][<span class="hljs-number">0</span>]);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-built_in">this</span>.isPlaying[guildID] = <span class="hljs-literal">false</span>;<br>                msg.channel.send(<span class="hljs-string">&#x27;目前沒有音樂了，請加入音樂 :D&#x27;</span>);<br>            &#125;<br><br>        &#125;);<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">resume</span>(<span class="hljs-params">msg</span>)</span> &#123;<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.dispatcher[msg.guild.id]) &#123;<br>            msg.channel.send(<span class="hljs-string">&#x27;恢復播放&#x27;</span>);<br><br>            <span class="hljs-comment">// 恢復播放</span><br>            <span class="hljs-built_in">this</span>.dispatcher[msg.guild.id].resume();<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">pause</span>(<span class="hljs-params">msg</span>)</span> &#123;<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.dispatcher[msg.guild.id]) &#123;<br>            msg.channel.send(<span class="hljs-string">&#x27;暫停播放&#x27;</span>);<br><br>            <span class="hljs-comment">// 暫停播放</span><br>            <span class="hljs-built_in">this</span>.dispatcher[msg.guild.id].pause();<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">skip</span>(<span class="hljs-params">msg</span>)</span> &#123;<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.dispatcher[msg.guild.id]) &#123;<br>            msg.channel.send(<span class="hljs-string">&#x27;跳過目前歌曲&#x27;</span>);<br><br>            <span class="hljs-comment">// 跳過歌曲</span><br>            <span class="hljs-built_in">this</span>.dispatcher[msg.guild.id].end();<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">nowQueue</span>(<span class="hljs-params">msg</span>)</span> &#123;<br><br>        <span class="hljs-comment">// 如果隊列中有歌曲就顯示</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.queue[msg.guild.id] &amp;&amp; <span class="hljs-built_in">this</span>.queue[msg.guild.id].length &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// 字串處理，將 Object 組成字串</span><br>            <span class="hljs-keyword">const</span> queueString = <span class="hljs-built_in">this</span>.queue[msg.guild.id].map(<span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> <span class="hljs-string">`[<span class="hljs-subst">$&#123;index+<span class="hljs-number">1</span>&#125;</span>] <span class="hljs-subst">$&#123;item.name&#125;</span>`</span>).join();<br>            msg.channel.send(queueString);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            msg.channel.send(<span class="hljs-string">&#x27;目前隊列中沒有歌曲&#x27;</span>);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">leave</span>(<span class="hljs-params">msg</span>)</span> &#123;<br><br>        <span class="hljs-comment">// 如果機器人在頻道中</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.connection[msg.guild.id] &amp;&amp; <span class="hljs-built_in">this</span>.connection[msg.guild.id].status === <span class="hljs-number">0</span>) &#123;<br><br>            <span class="hljs-comment">// 如果機器人有播放過歌曲</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.queue.hasOwnProperty(msg.guild.id)) &#123;<br><br>                <span class="hljs-comment">// 清空播放列表</span><br>                <span class="hljs-keyword">delete</span> <span class="hljs-built_in">this</span>.queue[msg.guild.id];<br><br>                <span class="hljs-comment">// 改變 isPlaying 狀態為 false</span><br>                <span class="hljs-built_in">this</span>.isPlaying[msg.guild.id] = <span class="hljs-literal">false</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// 離開頻道</span><br>            <span class="hljs-built_in">this</span>.connection[msg.guild.id].disconnect();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            msg.channel.send(<span class="hljs-string">&#x27;機器人未加入任何頻道&#x27;</span>);<br>        &#125;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> music = <span class="hljs-keyword">new</span> Music();<br><br><span class="hljs-comment">// 當 Bot 接收到訊息時的事件</span><br>client.on(<span class="hljs-string">&#x27;message&#x27;</span>, <span class="hljs-keyword">async</span> (msg) =&gt; &#123;<br><br>    <span class="hljs-comment">// 如果發送訊息的地方不是語音群（可能是私人），就 return</span><br>    <span class="hljs-keyword">if</span> (!msg.guild) <span class="hljs-keyword">return</span>;<br><br>    <span class="hljs-comment">// !!join</span><br>    <span class="hljs-keyword">if</span> (msg.content === <span class="hljs-string">`<span class="hljs-subst">$&#123;prefix&#125;</span>join`</span>) &#123;<br><br>        <span class="hljs-comment">// 機器人加入語音頻道</span><br>        music.join(msg);<br>    &#125;<br><br>    <span class="hljs-comment">// 如果使用者輸入的內容中包含 !!play</span><br>    <span class="hljs-keyword">if</span> (msg.content.indexOf(<span class="hljs-string">`<span class="hljs-subst">$&#123;prefix&#125;</span>play`</span>) &gt; -<span class="hljs-number">1</span>) &#123;<br><br>        <span class="hljs-comment">// 如果使用者在語音頻道中</span><br>        <span class="hljs-keyword">if</span> (msg.member.voice.channel) &#123;<br><br>            <span class="hljs-comment">// 播放音樂</span><br>            <span class="hljs-keyword">await</span> music.play(msg);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br><br>            <span class="hljs-comment">// 如果使用者不在任何一個語音頻道</span><br>            msg.reply(<span class="hljs-string">&#x27;你必須先加入語音頻道&#x27;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// !!resume</span><br>    <span class="hljs-keyword">if</span> (msg.content === <span class="hljs-string">`<span class="hljs-subst">$&#123;prefix&#125;</span>resume`</span>) &#123;<br><br>        <span class="hljs-comment">// 恢復音樂</span><br>        music.resume(msg);<br>    &#125;<br><br>    <span class="hljs-comment">// !!pause</span><br>    <span class="hljs-keyword">if</span> (msg.content === <span class="hljs-string">`<span class="hljs-subst">$&#123;prefix&#125;</span>pause`</span>) &#123;<br><br>        <span class="hljs-comment">// 暫停音樂</span><br>        music.pause(msg);<br>    &#125;<br><br>    <span class="hljs-comment">// !!skip</span><br>    <span class="hljs-keyword">if</span> (msg.content === <span class="hljs-string">`<span class="hljs-subst">$&#123;prefix&#125;</span>skip`</span>) &#123;<br><br>        <span class="hljs-comment">// 跳過音樂</span><br>        music.skip(msg);<br>    &#125;<br><br>    <span class="hljs-comment">// !!queue</span><br>    <span class="hljs-keyword">if</span> (msg.content === <span class="hljs-string">`<span class="hljs-subst">$&#123;prefix&#125;</span>queue`</span>) &#123;<br><br>        <span class="hljs-comment">// 查看隊列</span><br>        music.nowQueue(msg);<br>    &#125;<br><br>    <span class="hljs-comment">// !!leave</span><br>    <span class="hljs-keyword">if</span> (msg.content === <span class="hljs-string">`<span class="hljs-subst">$&#123;prefix&#125;</span>leave`</span>) &#123;<br><br>        <span class="hljs-comment">// 機器人離開頻道</span><br>        music.leave(msg);<br>    &#125;<br>&#125;);<br><br><span class="hljs-comment">// 連上線時的事件</span><br>client.on(<span class="hljs-string">&#x27;ready&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Logged in as <span class="hljs-subst">$&#123;client.user.tag&#125;</span>!`</span>);<br>&#125;);<br><br>client.login(token);<br></code></pre></td></tr></table></figure><p>寫完後就可以運行看看。</p><p>操作流程是先 <code>!!join</code> 讓機器人加入語音頻道→ <code>!!play 音樂網址</code> 播放音樂或加入隊列（如果音樂正在播放）。</p><p>功能如下：</p><ul><li>【機器人加入語音】<code>!!join</code></li><li>【播放音樂（加入隊列）】<code>!!play 音樂網址</code></li><li>【暫停播放】<code>!!pause</code></li><li>【恢復播放】<code>!!resume</code></li><li>【跳過這首歌曲】<code>!!skip</code></li><li>【查看歌曲隊列】<code>!!queue</code></li><li>【讓機器人離開語音頻道（會清空歌曲隊列）】<code>!!leave</code></li></ul><p>可以自行玩玩看。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">$ <span class="hljs-keyword">node</span> <span class="hljs-title">discord</span>.js<br></code></pre></td></tr></table></figure><p><img src="/images/dc-bot/02/02.jpg" alt=""></p><p>本來想把程式碼切開在文中講解，但是發現這樣寫起來會篇幅太長而且雜亂，所以就乾脆把註解寫在 code 裡面。</p><p>本次音樂機器人的 <a href="https://github.com/B-l-u-e-b-e-r-r-y/Discord-Bot-02">Github Repository</a>，可以自行 clone 下來研究或修改。</p><h1>FAQ</h1><p>這邊蒐集了可能會遇到的問題。</p><ul><li>Q：執行程式後出現 <code>Error: Cannot find module 'xxx'</code> 怎麼辦？</li><li>A：通常那個 <code>xxx</code> 是缺少安裝的套件。跑一下安裝套件的指令 <code>npm i 套件名稱</code> 應該就正常了。</li></ul><hr><ul><li>Q：下 play 指令後機器人跳出 <code>MinigetError: Status code: 404</code> 的錯誤訊息怎麼辦？</li><li>A：請更新 <a href="https://github.com/fent/node-ytdl-core">node-ytdl-core</a> 至最新版本。<code>npm i node-ytdl-core@latest</code></li></ul><hr><ul><li>Q：播放音樂時，先 <code>!!pause</code> 後再 <code>!!resume</code>，機器人沒有恢復播放怎麼辦？</li><li>A：與 discord.js 和 node.js 版本有關。目前只能等 discord.js 修復或自降 node.js 版本。<br>詳細請參考這個 issue：<a href="https://github.com/discordjs/discord.js/issues/5300">The function dispatcher.pause() and dispatcher.resume() only works on a second switch #5300</a></li></ul><h2 id="目前可正常運行的版本（參考用）">目前可正常運行的版本（參考用）</h2><ul><li>node.js: v14.16</li><li>@discordjs/opus: “0.5.0”</li><li>discord.js: “12.5.3”</li><li>ffmpeg-static: “4.2.8”</li><li>ytdl-core: “4.8.3”</li></ul><h1>更新</h1><h2 id="2021-01-13-更新">2021/01/13 更新</h2><p>發現之前會有無法播放的問題，已更新 ytdl 套件解決問題。</p><h2 id="2021-02-03-更新">2021/02/03 更新</h2><p>發現更新 ytdl 套件後會無法播放音樂的問題，因為 <code>musicURL</code> 字串的空格沒處理乾淨：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> musicURL = msg.content.replace(<span class="hljs-string">`<span class="hljs-subst">$&#123;prefix&#125;</span>play`</span>, <span class="hljs-string">&#x27;&#x27;</span>);<br></code></pre></td></tr></table></figure><p>改為：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> musicURL = msg.content.replace(<span class="hljs-string">`<span class="hljs-subst">$&#123;prefix&#125;</span>play`</span>, <span class="hljs-string">&#x27;&#x27;</span>).trim();<br></code></pre></td></tr></table></figure><h2 id="2021-05-30-更新">2021/05/30 更新</h2><p>發現機器人無法於不同伺服器播放歌曲的問題，是因為原本的 <code>isPlaying</code> 變數忘了寫成物件，變成多個伺服器共用一個變數。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">this</span>.isPlaying = <span class="hljs-literal">false</span>;<br></code></pre></td></tr></table></figure><p>改為：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">this</span>.isPlaying = &#123;&#125;;  <span class="hljs-comment">// &#123; guild1ID: false, guild2ID: true, ... &#125;</span><br></code></pre></td></tr></table></figure><h2 id="2021-06-27-更新">2021/06/27 更新</h2><p>加入一些防呆機制以及更新套件版本。</p><p>舊朋友如果有遇到問題，請試著更新 <a href="https://github.com/fent/node-ytdl-core">node-ytdl-core</a> 為最新版本（4.8.3）：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> install ytdl-core@latest<br></code></pre></td></tr></table></figure><hr><p><strong>【用 JS 寫一個 Discord Bot！】系列文章</strong></p><p><a href="https://b-l-u-e-b-e-r-r-y.github.io/post/DiscordBot01/">【用 JS 寫一個 Discord Bot！】01 建立機器人</a><br><a href="https://b-l-u-e-b-e-r-r-y.github.io/post/DiscordBot02/">【用 JS 寫一個 Discord Bot！】02 音樂機器人</a></p>]]></content>
    
    
    <categories>
      
      <category>node.js</category>
      
      <category>Discord Bot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Javascript</tag>
      
      <tag>w3HexSchool</tag>
      
      <tag>node.js</tag>
      
      <tag>Discord.js</tag>
      
      <tag>DC機器人</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>以 MySQL 為例解釋外鍵（Foreign Key）</title>
    <link href="/post/ForeignKey/"/>
    <url>/post/ForeignKey/</url>
    
    <content type="html"><![CDATA[<h1>介紹</h1><p>外鍵（Foreign Key）是指向其他表的主鍵（Primary Key）的欄位，用於確定兩張表的關聯性及資料完整性，以避免部分資料匹配不上的問題。</p><ul><li>如果想要使用外鍵，儲存引擎必須是 InnoDB</li><li>外鍵只能指向被設定為主鍵的欄位</li><li>外鍵與指向的主鍵資料型別必須相同</li></ul><p>接下來會以 MySQL 示範 Foreign Key 的常見使用情境，以及操作時會碰到的問題。</p><h1>實作</h1><p>我們會有兩張資料表：users 及 orders。</p><p>users 負責管理會員資料，orders 則管理訂單資料。</p><p>這邊 users 與 orders 的關係為：先有 users（會員），才有 orders（訂單）。一個會員有多個訂單（反之則不可能），所以 users 為父表，orders 為子表，外鍵建立在 orders。</p><h2 id="建立資料表">建立資料表</h2><h3 id="users">users</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> users(<br>    userID <span class="hljs-type">INT</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">PRIMARY</span> KEY,<br>    userName <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>)<br>);<br></code></pre></td></tr></table></figure><h3 id="orders">orders</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> orders(<br>    orderID <span class="hljs-type">INT</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">PRIMARY</span> KEY,<br>    userID <span class="hljs-type">INT</span>(<span class="hljs-number">50</span>),<br>    product <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">100</span>),<br>    price <span class="hljs-type">INT</span>(<span class="hljs-number">11</span>),<br>    <span class="hljs-keyword">FOREIGN</span> KEY(userID) <span class="hljs-keyword">REFERENCES</span> users(userID)<br>);<br></code></pre></td></tr></table></figure><h2 id="新增資料">新增資料</h2><p>接下來我們各別在 users 及 orders 插入資料。</p><p>通常會員與訂單的關係都是先有會員、才有訂單，不會有反過來的情境。綁定外鍵的使用方式也是相同，因為外鍵放在 orders，所以 users 的資料必須先被建立才行。</p><p>換句話來說，不能先有訂單才有會員。</p><p>為了實驗，我們先在 orders 插入一筆資料看看：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> orders <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;phone&#x27;</span>, <span class="hljs-number">20000</span>);<br></code></pre></td></tr></table></figure><p>執行時報錯：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">Error </span>Code: 1216. Cannot add or update a child row: a foreign key constraint fails<br></code></pre></td></tr></table></figure><p>第二個 1 是 userID，因為另一張表 users 找不到 userID 為 1 的資料，所以此筆插入會失敗。</p><p>綁定外鍵的效果就在於此，MySQL 會先確認父表的主鍵欄位有符合的資料，才可以插入資料。</p><p>按照標準流程先插入 users 資料，再插入 orders，就能正常執行了。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> users <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;Blueberry&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> orders <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;phone&#x27;</span>, <span class="hljs-number">20000</span>);<br></code></pre></td></tr></table></figure><p><strong>users</strong></p><table><thead><tr><th>userID（主鍵 PK）</th><th>userName</th></tr></thead><tbody><tr><td>1</td><td>Blueberry</td></tr></tbody></table><p><strong>orders</strong></p><table><thead><tr><th>orderID</th><th>userID（外鍵 FK）</th><th>product</th><th>price</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>phone</td><td>20000</td></tr></tbody></table><h2 id="刪除資料">刪除資料</h2><p>如果想刪除 orders 資料，是沒有問題的，一個會員要取消訂單是很正常的操作。</p><p>但如果今天我們要刪除 users 的資料，並把這個 users 所屬的 orders 都一起刪除呢？</p><p>直接刪除 users？</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> users <span class="hljs-keyword">WHERE</span> userID <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>這樣操作會報錯：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">Error </span>Code: 1217. Cannot delete or update a parent row: a foreign key constraint fails<br></code></pre></td></tr></table></figure><p>前面說過，只要綁定了外鍵，MySQL 就會拿父表（users）和子表（orders）進行比對。</p><p>所以如果要這樣操作，必須先把 users 所屬的 orders 都先刪除才行：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> orders <span class="hljs-keyword">WHERE</span> userID <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> users <span class="hljs-keyword">WHERE</span> userID <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>但是不用這麼麻煩，我們只要在資料表建立時設定 <code>ON DELETE</code> 的模式就可以了。</p><h3 id="ON-DELECT-的四種模式">ON DELECT 的四種模式</h3><ul><li>RESTRICT（約束）：預設模式。當在父表刪除資料時，會比對子表是否有對應的資料，如果有則不允許刪除。</li><li>CASCADE（級聯）：當在父表刪除資料時，會對比子表是否有對應的資料，如果有則會一起刪除。</li><li>SET NULL：當在父表刪除資料時，會對比子表是否有對應的資料，如果有則設置子表的外鍵欄位為 <code>NULL</code>，子表資料不會被刪除。（欄位需允許 NULL）</li><li>NO ACTION：與 RESTRICT 相同。</li></ul><p>因此要達到前面的目的，可以在設定外鍵時使用 <code>ON DELETE CASCADE</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> orders(<br>    orderID <span class="hljs-type">INT</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">PRIMARY</span> KEY,<br>    userID <span class="hljs-type">INT</span>(<span class="hljs-number">50</span>),<br>    product <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">100</span>),<br>    price <span class="hljs-type">INT</span>(<span class="hljs-number">11</span>),<br>    <span class="hljs-keyword">FOREIGN</span> KEY(userID) <span class="hljs-keyword">REFERENCES</span> users(userID) <span class="hljs-keyword">ON</span> <span class="hljs-keyword">DELETE</span> CASCADE<br>);<br></code></pre></td></tr></table></figure><p>設定為 CASCADE（級聯）就可以直接刪除 users 的資料，連同 orders 的資料也會一起不見。</p><h2 id="編輯資料">編輯資料</h2><p>編輯和刪除一樣，在預設的情況下無法直接改變綁定外鍵的欄位。根據不同需求，我們同樣可以在資料表建立時更改 <code>ON UPDATE</code> 的模式。</p><h3 id="ON-UPDATE-的四種模式">ON UPDATE 的四種模式</h3><ul><li>RESTRICT（約束）：預設模式。父表修改主鍵欄位時，會比對子表是否有對應的資料，如果有則不允許修改。</li><li>CASCADE（級聯）：當在父表修改主鍵欄位時，會對比子表是否有對應的資料，如果有則會一起修改。</li><li>SET NULL：當在父表修改主鍵欄位時，會對比子表是否有對應的資料，如果有則設置子表的外鍵欄位為 <code>NULL</code>。（欄位需允許 NULL）</li><li>NO ACTION：與 RESTRICT 相同。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> orders(<br>    orderID <span class="hljs-type">INT</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">PRIMARY</span> KEY,<br>    userID <span class="hljs-type">INT</span>(<span class="hljs-number">50</span>),<br>    product <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">100</span>),<br>    price <span class="hljs-type">INT</span>(<span class="hljs-number">11</span>),<br>    <span class="hljs-keyword">FOREIGN</span> KEY(userID) <span class="hljs-keyword">REFERENCES</span> users(userID) <span class="hljs-keyword">ON</span> <span class="hljs-keyword">DELETE</span> CASCADE <span class="hljs-keyword">ON</span> UPDATE CASCADE<br>);<br></code></pre></td></tr></table></figure><blockquote><p>ON UPDATE 可以和 ON DELETE 一起設定。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>w3HexSchool</tag>
      
      <tag>MySQL</tag>
      
      <tag>Foreign Key</tag>
      
      <tag>FK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Functional Programming 初級入門</title>
    <link href="/post/FunctionalProgramming01/"/>
    <url>/post/FunctionalProgramming01/</url>
    
    <content type="html"><![CDATA[<h1>前言</h1><p>最近打算把 Udemy 的這堂<a href="https://www.udemy.com/course/javascriptjs/">《JavaScript 全攻略：克服 JS 的奇怪部分》</a>補完，才發現裡面有提到 Functional Programming 的觀念，之前就一直想學這塊，今天剛好有這個機會可以入門。</p><p>在堅持鐵人賽的這幾週，漸漸也養成了在週六學習新知的習慣，但也發現一天的時間要包含學習和寫文章有點不太夠，之後希望能把時間管理慢慢做好，多騰出一些平日的時間來學習，邁向一週寫兩篇文的目標前進。</p><h1>什麼是 Functional Programming</h1><p>Functional Programming（以下簡稱 FP）是一種編程範例（Programming paradigm），可以理解為是一種程式設計風格，只有在擁有一級函式（First-class Function）的程式語言中才能實作。</p><h1>實作</h1><p>現在我們有 <code>arr1</code> 和 <code>arr2</code> 兩個陣列。我希望 <code>arr2</code> 陣列內的每個數字是 <code>arr1</code> 的數字 * 2。</p><p>一般我們可能會這樣做：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">const</span> arr2 = [];<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr1.length; i++) &#123;<br>    arr2.push(arr1[i] * <span class="hljs-number">2</span>);<br>&#125;<br><br><span class="hljs-built_in">console</span>.log(arr2);  <span class="hljs-comment">// [2, 4, 6]</span><br></code></pre></td></tr></table></figure><p>為了符合 FP 思維，接下來會將程式碼拆分成可複用的函式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> mapForEach = <span class="hljs-function">(<span class="hljs-params">arr, fn</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> output = [];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>        output.push(fn(arr[i]));<br>    &#125;<br>    <span class="hljs-keyword">return</span> output;<br>&#125;<br><br><span class="hljs-keyword">const</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">const</span> arr2 = mapForEach(arr1, <span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item * <span class="hljs-number">2</span>);<br><br><span class="hljs-built_in">console</span>.log(arr2);  <span class="hljs-comment">// [2, 4, 6]</span><br></code></pre></td></tr></table></figure><p>但是這樣還不夠，我希望 <code>mapForEach(arr1, item =&gt; item * 2)</code> 的部分可以更彈性。</p><p>下面將 <code>item * 2</code> 的部分，拆分成可以自訂數字的 <code>pastNumber()</code> 函式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> mapForEach = <span class="hljs-function">(<span class="hljs-params">arr, fn</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> output = [];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>        output.push(fn(arr[i]));<br>    &#125;<br>    <span class="hljs-keyword">return</span> output;<br>&#125;<br><br><span class="hljs-keyword">const</span> pastNumber = <span class="hljs-function">(<span class="hljs-params">number, item</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> item * number;<br>&#125;<br><br><span class="hljs-keyword">const</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">const</span> arr2 = mapForEach(arr1, pastNumber.bind(<span class="hljs-built_in">this</span>, <span class="hljs-number">2</span>));<br><br><span class="hljs-built_in">console</span>.log(arr2);  <span class="hljs-comment">// [2, 4, 6]</span><br></code></pre></td></tr></table></figure><p>這一段程式碼我自己看了蠻長一段時間才懂，一直不懂這邊明明只給了 <code>number</code> 的值，<code>item</code> 的值是怎麼取到的。後來想到之前寫的<a href="https://b-l-u-e-b-e-r-r-y.github.io/post/BindCallApply/#function-currying">拆解 bind 程式碼</a>，也用同樣的方式拆解，才理解這段的意思。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> pastNumber = <span class="hljs-function">(<span class="hljs-params">number, item</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> item * number;<br>&#125;<br><br><span class="hljs-keyword">const</span> arr2 = mapForEach(arr1, pastNumber.bind(<span class="hljs-built_in">this</span>, <span class="hljs-number">2</span>));<br><br><span class="hljs-comment">// 等於</span><br><span class="hljs-keyword">const</span> pastNumber = <span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> number = <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">return</span> item * number;<br>&#125;<br><br><span class="hljs-keyword">const</span> arr2 = mapForEach(arr1, pastNumber);<br></code></pre></td></tr></table></figure><p>但是每次都要寫 bind 實在很麻煩，有沒有更簡潔的寫法？</p><p>於是把這段 bind 也裝成一個函式，寫法簡潔多了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> mapForEach = <span class="hljs-function">(<span class="hljs-params">arr, fn</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> output = [];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>        output.push(fn(arr[i]));<br>    &#125;<br>    <span class="hljs-keyword">return</span> output;<br>&#125;<br><br><span class="hljs-keyword">const</span> pastNumberSimplify = <span class="hljs-function">(<span class="hljs-params">number</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">_number, item</span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> item * _number;<br>    &#125;.bind(<span class="hljs-built_in">this</span>, number);<br>&#125;<br><br><span class="hljs-comment">// 其實就等於</span><br><span class="hljs-comment">// const pastNumber = (number, item) =&gt; &#123;</span><br><span class="hljs-comment">//     return item * number;</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// const pastNumberSimplify = (number) =&gt; &#123;</span><br><span class="hljs-comment">//     return pastNumber.bind(this, number);</span><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-keyword">const</span> arr4 = mapForEach(arr1, pastNumberSimplify(<span class="hljs-number">2</span>));  <span class="hljs-comment">// [2, 4, 6]</span><br></code></pre></td></tr></table></figure><blockquote><p>這篇文變成好像是單純在解讀程式碼 XD，第一次接觸 FP，還寫不出什麼很深入的東西。內容都是跟著課程實作的，可以跟著寫看看，一起來感受 FP 的美好。</p></blockquote><hr><p>參考資料：</p><p><a href="https://www.udemy.com/course/javascriptjs/">《JavaScript 全攻略：克服 JS 的奇怪部分》</a></p>]]></content>
    
    
    <categories>
      
      <category>Javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Javascript</tag>
      
      <tag>w3HexSchool</tag>
      
      <tag>Functional Programming</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Javascript 原型鍊（Prototype Chain）</title>
    <link href="/post/Prototype/"/>
    <url>/post/Prototype/</url>
    
    <content type="html"><![CDATA[<h1>原型繼承</h1><p>不同於 Java 或 C++ 這些基於類別的語言，Javascript 是基於原型（prototype-based）的，ES6 雖然有 <code>class</code> 可以使用，但那只是語法糖而已。</p><p>廣義來說，繼承就是一個物件取用另一個物件的屬性或方法。而 Javascript 的繼承是<strong>原型繼承</strong>，繼承的物件並不會一併將所有屬性及方法複製過來，而是透過<strong>原型鍊</strong>來連結其物件繼承的屬性及方法。</p><p>假設有兩個物件：animal 和 elephant，讓 elephant 繼承 animal，那麼 elephant 就可以使用 animal 的屬性及方法，而 animal 就是 elephant 的原型物件。</p><p>當我們將物件打印出來並且展開，就可以看到 <code>__proto__</code>，它就是原型物件。<br><img src="/images/prototype/04.jpg" alt=""></p><h1>原型鍊</h1><p>在原型繼承中有提到<strong>原型鍊</strong>，那它是什麼呢？</p><img src="/images/prototype/01.jpg" width="60%" height="60%"><p>有一個物件名字叫 obj，它的原型是 proto，而 proto 有一個屬性是 Prop2，那我們如果想取用 Prop2，該怎麼寫？</p><p><code>obj.proto.Prop2</code> 嗎？不，不用這麼麻煩。</p><p>直接寫 <code>obj.Prop2</code> 就好。</p><p><strong>當我們想要取用 Prop2 時，Javascript 引擎就會下去找 Prop2 這個屬性，先找 obj 物件內部有沒有這個屬性，如果找不到這個屬性時，它就會往原型物件找（proto），這就是原型鍊。</strong></p><p><strong>看起來 Prop2 和 Prop3 是在主物件 obj 裡，但它們其實是在原型物件中，只是因為原型鍊（Prototype Chain）的關係才能被找到。</strong></p><blockquote><p>記住，別把它和範圍鍊（Scope Chain）搞混了。範圍鍊是用來尋找取用的變數。原型鍊則跟取用物件的屬性或方法有關。</p></blockquote><hr><p>那如果多了一個 obj2 繼承 proto 呢？<br><img src="/images/prototype/02.jpg" width="60%" height="60%"></p><p>obj 和 obj2 兩個主物件本身並不衝突，但它們繼承的 proto 卻是同一個，在記憶體中的位置也是相同的，因此如果想要取 Prop3 這個屬性，也一樣可以取得到。</p><h1>實作原型鍊（不建議）</h1><p>這裡會寫不建議，是因為 <code>obj.__proto__ = prototype</code> 這個寫法會造成效能問題，這邊會使用到只是為了 Demo，實際 Coding 的時候千萬不要這樣寫。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> person = &#123;<br>    <span class="hljs-attr">firstname</span>: <span class="hljs-string">&#x27;Default&#x27;</span>,<br>    <span class="hljs-attr">lastname</span>: <span class="hljs-string">&#x27;Default&#x27;</span>,<br>    <span class="hljs-attr">getFullName</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.firstname + <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-built_in">this</span>.lastname;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> blueberry = &#123;<br>    <span class="hljs-attr">firstname</span>: <span class="hljs-string">&#x27;Blueberry&#x27;</span>,<br>    <span class="hljs-attr">lastname</span>: <span class="hljs-string">&#x27;Lin&#x27;</span><br>&#125;<br><br><span class="hljs-comment">// 不要這樣寫！只是為了 DEMO</span><br>blueberry.__proto__ = person;<br><span class="hljs-built_in">console</span>.log(blueberry.getFullName());  <span class="hljs-comment">// Blueberry Lin</span><br><span class="hljs-built_in">console</span>.log(blueberry.firstname);      <span class="hljs-comment">// Blueberry</span><br></code></pre></td></tr></table></figure><p>假設我有兩個物件，blueberry 繼承了 person，所以當我想呼叫 <code>blueberry.getFullName()</code> 時，也理所當然可以使用這個方法，因為繼承就是讓一個物件可以使用原型物件的所有屬性和方法。</p><p>但是為什麼 <code>blueberry.firstname</code> 的結果會是 ‘Blueberry’ 而不是原型物件的 ‘Default’？這是因為 Javascript 引擎先在 blueberry 這個主物件中找到了 firstname 屬性，所以就不會繼續往原型鍊尋找。</p><hr><p>參考資料：</p><p><a href="https://www.udemy.com/course/javascriptjs/">《JavaScript 全攻略：克服 JS 的奇怪部分》</a></p>]]></content>
    
    
    <categories>
      
      <category>Javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Javascript</tag>
      
      <tag>w3HexSchool</tag>
      
      <tag>Prototype</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Javascript 設計模式 - 單例模式</title>
    <link href="/post/JSDesignPattern01/"/>
    <url>/post/JSDesignPattern01/</url>
    
    <content type="html"><![CDATA[<h1>前言</h1><p>本篇內容是我閱讀《<a href="https://www.books.com.tw/products/0010687594">JavaScript設計模式與開發實踐</a>》的筆記，這些程式碼會牽涉到一些觀念，如閉包、物件導向、原型鍊等，如果有不懂的地方可以詢問 Google 大神，這邊會比較著重在講解與實作設計模式的部分。</p><h1>單例模式</h1><p>單例模式是確保物件只建立一次的設計模式，好處是能減少不必要的內存，它的原則是<strong>保證一個類別僅有一個實例，並提供一個存取它的全域存取點</strong>，透過一個變數來記錄類別有沒有建立過物件，如果沒有被建立過，則建立物件並且返回；如果已建立過，則返回已建立的物件。</p><p>以前端開發者的角度來看，它適合用來實作按鈕點擊後的彈出式視窗，不論點擊多少次按鈕，這個彈出式視窗永遠只會被建立一次。</p><h2 id="不透明的單例模式">不透明的單例模式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> Singleton = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">name</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.instance = <span class="hljs-literal">null</span>;<br>&#125;<br><br>Singleton.getInstance = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">name</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.instance) &#123;<br>        <span class="hljs-built_in">this</span>.instance = <span class="hljs-keyword">new</span> Singleton(name);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.instance;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果要驗證這個單例有沒有成功，可以這樣寫：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> a = Singleton.getInstance(<span class="hljs-string">&#x27;a&#x27;</span>);<br><span class="hljs-keyword">const</span> b = Singleton.getInstance(<span class="hljs-string">&#x27;b&#x27;</span>);<br><span class="hljs-built_in">console</span>.log(a === b);  <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>不同於以往的 <code>new XXX()</code> 方式，上面的例子透過 <code>Singleton.getInstance</code> 來獲得 Singleton 類別的唯一物件，但這樣的寫法增加了這個類別的「不透明性」，使用者必須知道這是一個單例類別才行。</p><h2 id="透明的單例模式">透明的單例模式</h2><p>一個透明的單例，使用者可以像使用其他任何普通類別一樣，能透過 <code>new XXX()</code> 來獲得物件。下面的例子使用 CreateDiv 的單例類別來建立唯一的 div 節點，這個例子使用閉包來保存 <code>instance</code> 變數。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> CreateDiv = (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> instance;<br>    <span class="hljs-keyword">const</span> createDiv = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">html</span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (instance) &#123;<br>            <span class="hljs-keyword">return</span> instance;<br>        &#125;<br>        <br>        <span class="hljs-built_in">this</span>.html = html;<br>        <span class="hljs-built_in">this</span>.init();<br>        <span class="hljs-keyword">return</span> instance = <span class="hljs-built_in">this</span>;<br>    &#125;<br>        <br>    createDiv.prototype.init = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">const</span> div = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;div&#x27;</span>);<br>        div.innerHTML = <span class="hljs-built_in">this</span>.html;<br>        <span class="hljs-built_in">document</span>.body.appendChild(div);<br>    &#125;<br>        <br>    <span class="hljs-keyword">return</span> createDiv;<br>&#125;)();<br><br><span class="hljs-keyword">const</span> a = <span class="hljs-keyword">new</span> CreateDiv(<span class="hljs-string">&#x27;a&#x27;</span>);<br><span class="hljs-keyword">const</span> b = <span class="hljs-keyword">new</span> CreateDiv(<span class="hljs-string">&#x27;b&#x27;</span>);<br><span class="hljs-built_in">console</span>.log(a === b);  <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>這段程式碼其實沒有什麼問題，但在 createDiv 這個匿名函數裡同時做了兩件事：管理單例及建立 div，根據<a href="https://zh.wikipedia.org/wiki/%E5%8D%95%E4%B8%80%E5%8A%9F%E8%83%BD%E5%8E%9F%E5%88%99">單一職責原則</a>這樣的代碼應該盡量避免。所以後面會使用<a href="https://zh.wikipedia.org/wiki/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F">代理模式</a>來改善這段代碼。</p><h2 id="用代理模式實作單例">用代理模式實作單例</h2><p>這裡把管理單例的邏輯移到代理類別 proxySingleCreateDiv，和建立 div 的邏輯分開，這樣的代碼符合了單一職責原則，也更具可讀性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> CreateDiv = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">html</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.html = html;<br>    <span class="hljs-built_in">this</span>.init();<br>&#125;<br><br>CreateDiv.prototype.init = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">const</span> div = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;div&#x27;</span>);<br>    div.innerHTML = <span class="hljs-built_in">this</span>.html;<br>    <span class="hljs-built_in">document</span>.body.appendChild(div);<br>&#125;<br><br><span class="hljs-keyword">const</span> proxySingleCreateDiv = (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> instance;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">html</span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (!instance) &#123;<br>            instance = <span class="hljs-keyword">new</span> CreateDiv(html);<br>        &#125;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;)();<br><br><span class="hljs-keyword">const</span> a = <span class="hljs-keyword">new</span> proxySingleCreateDiv(<span class="hljs-string">&#x27;a&#x27;</span>);<br><span class="hljs-keyword">const</span> b = <span class="hljs-keyword">new</span> proxySingleCreateDiv(<span class="hljs-string">&#x27;b&#x27;</span>);<br><span class="hljs-built_in">console</span>.log(a === b);  <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h2 id="惰性單例">惰性單例</h2><p>惰性單例是指在需要時才建立物件，<a href="#%E4%B8%8D%E9%80%8F%E6%98%8E%E7%9A%84%E5%96%AE%E4%BE%8B%E6%A8%A1%E5%BC%8F">這個例子</a>其實就是使用惰性單例，當我們呼叫 <code>Singleton.getInstance()</code> 才建立單例，而非頁面載入時就建立好單例。</p><p>接著我們會使用全域變數結合惰性單例，實作彈出式視窗。</p><h1>JavaScript 的單例模式</h1><p>Javascript 其實是一門無類別的語言，所以基於「類別」的傳統單例模式並不適用，因此開發者常會將全域變數作為單例使用，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> a = &#123;&#125;;<br></code></pre></td></tr></table></figure><p>它能滿足單例的兩個條件：確保只有一個實例，又能提供全域存取。但使用全域變數容易造成命名空間汙染，也可能在開發的過程中不小心被覆蓋。要解決這個問題，可以使用命名空間或閉包封裝私有變數。</p><h3 id="命名空間">命名空間</h3><p>使用命名空間的好處是能降低全域變數的需求量，將變數都宣告在命名空間裡，避免命名衝突。要建立命名空間，可以直接使用物件字面常數建立，或動態建立命名空間。</p><h4 id="物件字面常數">物件字面常數</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> namespace = &#123;<br>    <span class="hljs-attr">a</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-comment">// do something</span><br>    &#125;,<br>    <span class="hljs-attr">b</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-comment">// do something</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="動態建立命名空間">動態建立命名空間</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> app = &#123;&#125;;<br>app.namespace = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">name</span>) </span>&#123;<br>    <span class="hljs-keyword">const</span> key = name.split(<span class="hljs-string">&#x27;.&#x27;</span>);<br>    <span class="hljs-keyword">let</span> _app = app;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i <span class="hljs-keyword">in</span> key) &#123;<br>        <span class="hljs-keyword">if</span> ( !_app[key[i]] ) &#123;<br>            _app[key[i]] = &#123;&#125;;<br>        &#125;<br>        <br>        _app = _app[key[i]];<br>    &#125;<br>&#125;<br><br>app.namespace(<span class="hljs-string">&#x27;event&#x27;</span>);<br>app.namespace(<span class="hljs-string">&#x27;dom.style&#x27;</span>);<br><br><span class="hljs-built_in">console</span>.log(app);<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  const app = &#123;</span><br><span class="hljs-comment"> *      event: &#123;&#125;,</span><br><span class="hljs-comment"> *      dom: &#123;</span><br><span class="hljs-comment"> *          style: &#123;&#125;</span><br><span class="hljs-comment"> *      &#125;</span><br><span class="hljs-comment"> *  &#125;</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><h3 id="閉包封裝私有變數">閉包封裝私有變數</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> user = (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">const</span> _name = <span class="hljs-string">&#x27;Blueberry&#x27;</span>;<br>    <span class="hljs-keyword">const</span> _age = <span class="hljs-number">24</span>;<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">getUserInfo</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">return</span> _name + <span class="hljs-string">&#x27;-&#x27;</span> + _age;<br>        &#125;<br>    &#125;<br>&#125;)();<br><br><span class="hljs-built_in">console</span>.log(user.getUserInfo());  <span class="hljs-comment">// Blueberry 24</span><br></code></pre></td></tr></table></figure><h2 id="實作彈出式視窗">實作彈出式視窗</h2><p>下面我們會實作一個彈出式視窗的惰性單例，按下「登入」按鈕時，彈出式視窗才會被建立。</p><h3 id="html">html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;loginBtn&quot;</span>&gt;</span>登入<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="css">css</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.login</span> &#123;<br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">50%</span>, -<span class="hljs-number">50%</span>);<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span> <span class="hljs-number">30px</span>;<br>    <span class="hljs-attribute">border</span>: solid <span class="hljs-number">1px</span> black;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Javascript">Javascript</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> createLoginLayer = (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> div;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (!div) &#123;<br>            div = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;div&#x27;</span>);<br>            div.innerHTML = <span class="hljs-string">&#x27;我是彈出式視窗&#x27;</span>;<br>            div.className = <span class="hljs-string">&#x27;login&#x27;</span>;<br>            div.style.display = <span class="hljs-string">&#x27;none&#x27;</span>;<br>            <span class="hljs-built_in">document</span>.body.appendChild(div);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> div;<br>    &#125;<br>&#125;)();<br><br><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;loginBtn&#x27;</span>).onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">const</span> loginLayer = createLoginLayer();<br>    loginLayer.style.display = <span class="hljs-string">&#x27;block&#x27;</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p>但是這個惰性單例還不夠好，<code>createLoginLayer</code> 物件違反了單一職責原則，它同時做了管理單例和建立彈出式視窗兩個動作。如果下次要建立的不是 div，而是一個 button，這段程式碼又要再重新抄一遍：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> createButton = (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> button;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (!button) &#123;<br>            button = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;button&#x27;</span>);<br>            button.innerHTML = <span class="hljs-string">&#x27;我是按鈕&#x27;</span>;<br>            button.style.display = <span class="hljs-string">&#x27;none&#x27;</span>;<br>            <span class="hljs-built_in">document</span>.body.appendChild(button);<br>        &#125;<br>        <span class="hljs-keyword">return</span> button;<br>    &#125;<br>&#125;)();<br></code></pre></td></tr></table></figure><p>所以我們將管理單例和建立彈出式視窗的邏輯分開，將管理單例的邏輯移到 <code>getSingle</code>，<code>createLoginLayer</code> 單純放建立視窗的邏輯就好。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> createLoginLayer = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">const</span> div = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;div&#x27;</span>);<br>    div.innerHTML = <span class="hljs-string">&#x27;我是彈出式視窗&#x27;</span>;<br>    div.className = <span class="hljs-string">&#x27;login&#x27;</span>;<br>    div.style.display = <span class="hljs-string">&#x27;none&#x27;</span>;<br>    <span class="hljs-built_in">document</span>.body.appendChild(div);<br>    <span class="hljs-keyword">return</span> div;<br>&#125;;<br><br><span class="hljs-keyword">const</span> getSingle = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">fn</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> result;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (!result) &#123;<br>            result = fn.apply(<span class="hljs-built_in">this</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> createSingleLoginLayer = getSingle(createLoginLayer);<br><br><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;loginBtn&#x27;</span>).onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">const</span> loginLayer = createSingleLoginLayer();<br>    loginLayer.style.display = <span class="hljs-string">&#x27;block&#x27;</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p>如此一來，要把建立彈出式視窗換成建立按鈕就簡單多了，不必動到管理單例的部分。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> createButton = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">const</span> button = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;button&#x27;</span>);<br>    button.innerHTML = <span class="hljs-string">&#x27;我是按鈕&#x27;</span>;<br>    button.style.display = <span class="hljs-string">&#x27;none&#x27;</span>;<br>    <span class="hljs-built_in">document</span>.body.appendChild(button);<br>    <span class="hljs-keyword">return</span> button;<br>&#125;;<br><br><span class="hljs-keyword">const</span> getSingle = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">fn</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> result;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (!result) &#123;<br>            result = fn.apply(<span class="hljs-built_in">this</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> createSingleButton = getSingle(createButton);<br><br><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;loginBtn&#x27;</span>).onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">const</span> buttonLayer = createSingleButton();<br>    buttonLayer.style.display = <span class="hljs-string">&#x27;block&#x27;</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><hr><p>參考資料：</p><p><a href="https://www.books.com.tw/products/0010687594">JavaScript設計模式與開發實踐</a></p>]]></content>
    
    
    <categories>
      
      <category>Javascript</category>
      
      <category>Design Pattern</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Javascript</tag>
      
      <tag>w3HexSchool</tag>
      
      <tag>Design Pattern</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【用 JS 寫一個 Discord Bot！】01 建立機器人</title>
    <link href="/post/DiscordBot01/"/>
    <url>/post/DiscordBot01/</url>
    
    <content type="html"><![CDATA[<h2 id="創建機器人">創建機器人</h2><p>首先到 <a href="https://discordapp.com/developers/applications/">Discord Developer</a> 建立機器人。（需登入）</p><h3 id="1-新增-APP">1. 新增 APP</h3><p>進入網頁後，點擊按鈕 New Application。</p><p><img src="/images/dc-bot/01/01.jpg" alt=""></p><h3 id="2-設定-APP-名稱">2. 設定 APP 名稱</h3><p><img src="/images/dc-bot/01/02.jpg" alt=""></p><p>提醒一下，APP名稱會出現在這邊：</p><p><img src="/images/dc-bot/01/02-1.jpg" alt=""></p><h3 id="3-點選左邊的-Bot">3. 點選左邊的 Bot</h3><p><img src="/images/dc-bot/01/03.jpg" alt=""></p><h3 id="4-新增-Bot">4. 新增 Bot</h3><p>點擊 Add Bot。</p><p><img src="/images/dc-bot/01/04.jpg" alt=""></p><p>Bot 新增後可以更改它的 USERNAME、ICON（頭貼），修改完畢後記得儲存。</p><p><img src="/images/dc-bot/01/05.jpg" alt=""></p><p>這裡的 Token 指的是機器人的秘鑰，編寫程式時需要加入這串 token。</p><p><strong>切忌不要將 token 洩漏出去</strong>，因為擁有 token 的人可以操控這隻 bot。</p><p>題外話：我曾經不小心把 token 上傳到 Github 上面過（當時還沒有開放私有庫），結果不到短短的一小時就被盜用，那時候整個 DC 群組的人都收到了廣告訊息…XD</p><p><strong>※ 2021/06/27 補充：現在如果不小心把 token 上傳到 Github，Discord 官方會用 Discord 通知 token 擁有人並強制重新產生 token。</strong></p><p>如果 token 不小心洩漏，可以點擊 <strong>Regenerate</strong> 重新產生 token。</p><p><img src="/images/dc-bot/01/06.jpg" alt=""></p><h3 id="5-設定機器人權限">5. 設定機器人權限</h3><p>拉到最下面可以看到 <strong>Bot Permissions</strong>，這裡可以設定機器人的權限。</p><p>勾選完後記得將 PERMISSIONS INTEGER 記錄下來。</p><p><img src="/images/dc-bot/01/09.jpg" alt=""></p><h3 id="6-邀請機器人至伺服器">6. 邀請機器人至伺服器</h3><p>回到 General Information，複製 APP 的 CLIENT ID。</p><p><img src="/images/dc-bot/01/07.jpg" alt=""></p><p>邀請 url 的格式如下，將剛才複製的 CLIENT ID 與 PERMISSIONS INTEGER 替換即可：</p><p><code>https://discordapp.com/oauth2/authorize?&amp;client_id=CLIENT_ID&amp;scope=bot&amp;permissions=PERMISSIONS_INTEGER</code></p><p>範例如下：</p><p><a href="https://discordapp.com/oauth2/authorize?&amp;client_id=695898879895404584&amp;scope=bot&amp;permissions=8">https://discordapp.com/oauth2/authorize?&amp;client_id=695898879895404584&amp;scope=bot&amp;permissions=8</a><br><img src="/images/dc-bot/01/08.jpg" alt=""></p><p>機器人進入伺服器後會是離線狀態，這完全是正常的，接下來我們就要用 Node.js 編寫機器人的功能。</p><h2 id="建立基礎環境">建立基礎環境</h2><p>必備：Node.js 版本 v14.0.0 以上、編輯器 (推薦 Visual Studio Code)</p><h3 id="1-安裝-Discord-js">1. 安裝 <a href="https://github.com/discordjs/discord.js/">Discord.js</a></h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">$ npm <span class="hljs-keyword">install</span> discord.js<br></code></pre></td></tr></table></figure><h3 id="2-新增-token-json">2. 新增 token.json</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;Token&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>Token 在 Bot 頁面複製：</p><p><img src="/images/dc-bot/01/06.jpg" alt=""></p><p><code>※ 如果專案要上傳至 Github，切記將 token.json 加入 .gitignore。</code></p><h3 id="3-新增-discord-js">3. 新增 discord.js</h3><p>於專案中新增 discord.js，這邊我們使用 <a href="https://github.com/discordjs/discord.js/">Discord.js</a> 的官方範例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> Discord = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;discord.js&#x27;</span>);<br><span class="hljs-keyword">const</span> &#123; token &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./token.json&#x27;</span>);<br><span class="hljs-keyword">const</span> client = <span class="hljs-keyword">new</span> Discord.Client();<br><br><span class="hljs-comment">// 連上線時的事件</span><br>client.on(<span class="hljs-string">&#x27;ready&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Logged in as <span class="hljs-subst">$&#123;client.user.tag&#125;</span>!`</span>);<br>&#125;);<br><br><span class="hljs-comment">// 當 Bot 接收到訊息時的事件</span><br>client.on(<span class="hljs-string">&#x27;message&#x27;</span>, <span class="hljs-function"><span class="hljs-params">msg</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">// 如果訊息的內容是 &#x27;ping&#x27;</span><br>    <span class="hljs-keyword">if</span> (msg.content === <span class="hljs-string">&#x27;ping&#x27;</span>) &#123;<br>        <span class="hljs-comment">// 則 Bot 回應 &#x27;Pong&#x27;</span><br>        msg.reply(<span class="hljs-string">&#x27;pong&#x27;</span>);<br>    &#125;<br>&#125;);<br><br>client.login(token);<br></code></pre></td></tr></table></figure><h3 id="4-運行程式">4. 運行程式</h3><p>讓機器人上線吧！</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">$ <span class="hljs-keyword">node</span> <span class="hljs-title">discord</span>.js<br></code></pre></td></tr></table></figure><p><img src="/images/dc-bot/01/11.jpg" alt=""></p><p>測試一下效果：</p><p><img src="/images/dc-bot/01/10.jpg" alt=""></p><hr><p>這是本次實作的<a href="https://github.com/B-l-u-e-b-e-r-r-y/Discord-Bot-01">範例程式碼</a>，可以參考檔案的配置，或是直接 Clone 到自己的電腦裡運行。</p><blockquote><p><strong>啟用步驟</strong></p><ol><li>安裝：<code>npm install</code></li><li>到 token.json，將 Your token 更換自己機器人的 Token</li><li>執行：<code>node discord.js</code></li></ol></blockquote><hr><p><strong>【用 JS 寫一個 Discord Bot！】系列文章</strong></p><p><a href="https://b-l-u-e-b-e-r-r-y.github.io/post/DiscordBot01/">【用 JS 寫一個 Discord Bot！】01 建立機器人</a><br><a href="https://b-l-u-e-b-e-r-r-y.github.io/post/DiscordBot02/">【用 JS 寫一個 Discord Bot！】02 音樂機器人</a></p>]]></content>
    
    
    <categories>
      
      <category>node.js</category>
      
      <category>Discord Bot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Javascript</tag>
      
      <tag>w3HexSchool</tag>
      
      <tag>node.js</tag>
      
      <tag>Discord.js</tag>
      
      <tag>DC機器人</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 Node.js 來爬蟲吧！[PTT 股票板]</title>
    <link href="/post/PTTCrawler/"/>
    <url>/post/PTTCrawler/</url>
    
    <content type="html"><![CDATA[<h1>前言</h1><p>一般大家爬蟲都是使用 python，其實 node.js 也是可以爬蟲的，作為前端，能用自己習慣的語言來寫當然很方便。</p><p>但是 python 和 node.js 除了寫法不同，兩者特性也是不同的，例如 node.js 是異步的、單執行緒，python 則是多執行緒等等，關於這些差異本文就不多加討論。</p><h1>模組</h1><p>node.js 爬蟲需要用到兩個模組：<a href="https://github.com/request/request">request</a> 和 <a href="https://github.com/cheeriojs/cheerio">cheerio</a>。</p><h2 id="介紹">介紹</h2><p><strong>request</strong> 是用來訪問網站用的，它能模擬 Client 訪問網站，設定訪問時帶的 Header。</p><p><strong>cheerio</strong> 算是 node.js 界的 jQuery，它是以 jQuery 為核心去設計的，好比要抓取一個 html，class 名稱為 title 的文字 <code>&lt;div class='title'&gt;標題&lt;/div&gt;</code>，cheerio 的寫法是這樣：<code>$('.title').text()</code>。</p><h2 id="安裝">安裝</h2><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada">$ npm i <span class="hljs-comment">--save request</span><br>$ npm i <span class="hljs-comment">--save cheerio</span><br></code></pre></td></tr></table></figure><h2 id="載入">載入</h2><p>安裝好後就可以看到專案的 package.json 已經出現這兩個模組，這時候就可以把模組引入程式中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> request = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;request&quot;</span>);<br><span class="hljs-keyword">const</span> cheerio = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;cheerio&quot;</span>);<br></code></pre></td></tr></table></figure><h1>實作</h1><h2 id="request-訪問">request 訪問</h2><p>本文以 <a href="https://www.ptt.cc/bbs/Stock/index.html">PTT 股票板</a> 為範例。</p><p>先發送 request，訪問股票板。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> pttCrawler = <span class="hljs-function">() =&gt;</span> &#123;<br>    request(&#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;https://www.ptt.cc/bbs/Stock/index.html&quot;</span>,<br>        <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;GET&quot;</span><br>    &#125;, <span class="hljs-function">(<span class="hljs-params">error, res, body</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">// 如果有錯誤訊息，或沒有 body(內容)，就 return</span><br>        <span class="hljs-keyword">if</span> (error || !body) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;);<br>&#125;;<br><br>pttCrawler();<br></code></pre></td></tr></table></figure><h2 id="cheerio-抓取-Element">cheerio 抓取 Element</h2><p>request 之後就可以取得內容(body)，接著使用 cheerio 抓取 Element。</p><p>寫程式碼之前，可以先到股票板，按右鍵 &gt; 檢查，看看 Element 的名稱是什麼。</p><p>如下圖，紅框就是要抓的部分：</p><p><img src="/images/ptt-crawler/ptt1.jpg" alt=""></p><p>因為它是父元素(<code>.r-list-container</code>)裡包著許多子元素(<code>.r-ent</code>)的結構，所以這邊要使用到迴圈。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> pttCrawler = <span class="hljs-function">() =&gt;</span> &#123;<br>    request(&#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;https://www.ptt.cc/bbs/Stock/index.html&quot;</span>,<br>        <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;GET&quot;</span><br>    &#125;, <span class="hljs-function">(<span class="hljs-params">error, res, body</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">// 如果有錯誤訊息，或沒有 body(內容)，就 return</span><br>        <span class="hljs-keyword">if</span> (error || !body) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">const</span> data = [];<br>        <span class="hljs-keyword">const</span> $ = cheerio.load(body); <span class="hljs-comment">// 載入 body</span><br>        <span class="hljs-keyword">const</span> list = $(<span class="hljs-string">&quot;.r-list-container .r-ent&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; list.length; i++) &#123;<br>            <span class="hljs-keyword">const</span> title = list.eq(i).find(<span class="hljs-string">&#x27;.title a&#x27;</span>).text();<br>            <span class="hljs-keyword">const</span> author = list.eq(i).find(<span class="hljs-string">&#x27;.meta .author&#x27;</span>).text();<br>            <span class="hljs-keyword">const</span> date = list.eq(i).find(<span class="hljs-string">&#x27;.meta .date&#x27;</span>).text();<br>            <span class="hljs-keyword">const</span> link = list.eq(i).find(<span class="hljs-string">&#x27;.title a&#x27;</span>).attr(<span class="hljs-string">&#x27;href&#x27;</span>);<br><br>            data.push(&#123; title, author, date, link &#125;);<br>        &#125;<br><br>        <span class="hljs-built_in">console</span>.log(data);<br>    &#125;);<br>&#125;;<br><br>pttCrawler();<br></code></pre></td></tr></table></figure><p>執行程式後就可以看到結果囉！</p><p><img src="/images/ptt-crawler/ptt2.jpg" alt=""></p><h2 id="完整程式碼">完整程式碼</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> request = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;request&quot;</span>);<br><span class="hljs-keyword">const</span> cheerio = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;cheerio&quot;</span>);<br><br><span class="hljs-keyword">const</span> pttCrawler = <span class="hljs-function">() =&gt;</span> &#123;<br>    request(&#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;https://www.ptt.cc/bbs/Stock/index.html&quot;</span>,<br>        <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;GET&quot;</span><br>    &#125;, <span class="hljs-function">(<span class="hljs-params">error, res, body</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">// 如果有錯誤訊息，或沒有 body(內容)，就 return</span><br>        <span class="hljs-keyword">if</span> (error || !body) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">const</span> data = [];<br>        <span class="hljs-keyword">const</span> $ = cheerio.load(body); <span class="hljs-comment">// 載入 body</span><br>        <span class="hljs-keyword">const</span> list = $(<span class="hljs-string">&quot;.r-list-container .r-ent&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; list.length; i++) &#123;<br>            <span class="hljs-keyword">const</span> title = list.eq(i).find(<span class="hljs-string">&#x27;.title a&#x27;</span>).text();<br>            <span class="hljs-keyword">const</span> author = list.eq(i).find(<span class="hljs-string">&#x27;.meta .author&#x27;</span>).text();<br>            <span class="hljs-keyword">const</span> date = list.eq(i).find(<span class="hljs-string">&#x27;.meta .date&#x27;</span>).text();<br>            <span class="hljs-keyword">const</span> link = list.eq(i).find(<span class="hljs-string">&#x27;.title a&#x27;</span>).attr(<span class="hljs-string">&#x27;href&#x27;</span>);<br><br>            data.push(&#123; title, author, date, link &#125;);<br>        &#125;<br><br>        <span class="hljs-built_in">console</span>.log(data);<br>    &#125;);<br>&#125;;<br><br>pttCrawler();<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>node.js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Javascript</tag>
      
      <tag>w3HexSchool</tag>
      
      <tag>node.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Javascript 的淺拷貝與深拷貝</title>
    <link href="/post/ShallowCopyAndDeepCopy/"/>
    <url>/post/ShallowCopyAndDeepCopy/</url>
    
    <content type="html"><![CDATA[<h1>前言</h1><p>在寫 JS 的過程中，常常會遇到需要拷貝物件或陣列的情況。</p><p>然而之後修改拷貝的內容時，發現原本的物件或陣列的屬性也跟著一起改變。</p><p>好比下面的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> person = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Blueberry&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-string">&#x27;24&#x27;</span>,<br>    <span class="hljs-attr">interest</span>: <span class="hljs-string">&#x27;閱讀&#x27;</span><br>&#125;;<br><br><span class="hljs-keyword">const</span> copy = person;<br>copy.interest = <span class="hljs-string">&#x27;泡咖啡&#x27;</span>;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;copy: &#x27;</span>, copy);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;person: &#x27;</span>, person);<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * [Output]</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * copy: Object &#123;</span><br><span class="hljs-comment"> *     name: &#x27;Blueberry&#x27;,</span><br><span class="hljs-comment"> *     age: &#x27;24&#x27;,</span><br><span class="hljs-comment"> *     interest: &#x27;泡咖啡&#x27;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> * person: Object &#123;</span><br><span class="hljs-comment"> *     name: &#x27;Blueberry&#x27;,</span><br><span class="hljs-comment"> *     age: &#x27;24&#x27;,</span><br><span class="hljs-comment"> *     interest: &#x27;泡咖啡&#x27;  // 疑等等？怎麼不是&#x27;閱讀&#x27;了？</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><p>為什麼我修改的是 <code>copy</code> 的 interest，卻連 <code>person</code> 的值也一起改了？</p><p>這就跟 <strong>by value</strong> 與 <strong>by reference</strong> 有關了。</p><h1>by value VS by reference</h1><p>兩者的不同在於<strong>記憶體的位置</strong>，如果是 by value，複製時記憶體位置會是<strong>不同</strong>的，</p><p>但如果是 by reference，複製時記憶體位置會是<strong>相同</strong>的，下面就來詳細介紹與舉例。</p><h2 id="by-value">by value</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> a = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">const</span> b = a;<br><br>a = <span class="hljs-number">2</span>;<br><span class="hljs-built_in">console</span>.log(a, b);  <span class="hljs-comment">// 1, 2</span><br></code></pre></td></tr></table></figure><p>根據上面的範例，<code>a</code> 在記憶體中位於 <code>0x001</code> 位置，複製 a 的 <code>b</code> 在記憶體中位於 <code>0x002</code> 位置。</p><p><strong>兩者位於不同的記憶體位置，所以在後續修改時，不會影響到對方。</strong></p><p>只要是<strong>純值（數字、布林或字串）</strong>，就是 by value。</p><h2 id="by-reference">by reference</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> a = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Blueberry&#x27;</span> &#125;;<br><span class="hljs-keyword">const</span> b = a;<br><br>a.name = <span class="hljs-string">&#x27;Strawberry&#x27;</span>;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;a: &#x27;</span>, a);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;b: &#x27;</span>, b);<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * [Output]</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * a: Object &#123;</span><br><span class="hljs-comment"> *     name: &quot;Strawberry&quot;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> * b: Object &#123;</span><br><span class="hljs-comment"> *     name: &quot;Strawberry&quot;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span> <br></code></pre></td></tr></table></figure><p>根據上面的範例，a 在記憶體中位於 <code>0x001</code> 位置，複製 a 的 b 在記憶體中也位於 <code>0x001</code> 位置。沒有新的物件產生，也沒有物件的拷貝被創造。</p><p><strong>兩者位於相同的記憶體位置，可以說 a 其實就是 b，只是換個名字而已，所以在後續修改時，會影響到對方。</strong></p><p>只要是<strong>物件（陣列、物件或函式）</strong>，就是 by reference。</p><p>如果不希望修改時會影響到對方，就必須得使用<strong>淺拷貝</strong>或<strong>深拷貝</strong>去複製。</p><h1>淺拷貝 VS 深拷貝</h1><p>兩者的差異在於，<strong>淺拷貝</strong>只能複製第一層，無法深層複製第二層、第三層…等等，如果更改了第二層以後的內容，一樣會影響到原本的物件，因為第二層以後的記憶體位置與原本物件的記憶體位置還是相同的。<strong>但如果需要拷貝的物件只有一層，用淺拷貝還是可以的。</strong></p><p>而<strong>深拷貝</strong>就不只了，它能深層複製第一層乃至最內層。<strong>不論修改的是哪一層，都不會被影響，因為它的每一層與原物件都是不同的記憶體位置。</strong></p><p>下面就來介紹淺拷貝與深拷貝的用法。</p><h2 id="淺拷貝">淺拷貝</h2><h3 id="Object-assign">Object.assign()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> person = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Blueberry&#x27;</span>,<br>    <span class="hljs-attr">interest</span>: [<span class="hljs-string">&#x27;閱讀&#x27;</span>, <span class="hljs-string">&#x27;玩遊戲&#x27;</span>]<br>&#125;;<br><br><span class="hljs-keyword">const</span> copy = <span class="hljs-built_in">Object</span>.assign(&#123;&#125;, person);<br><br>copy.name = <span class="hljs-string">&#x27;Strawberry&#x27;</span>;<br>copy.interest[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;泡咖啡&#x27;</span>;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;copy: &#x27;</span>, copy);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;person: &#x27;</span>, person);<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * [Output]</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * copy: Object &#123;</span><br><span class="hljs-comment"> *     name: &#x27;Strawberry&#x27;,</span><br><span class="hljs-comment"> *     interest: [&#x27;泡咖啡&#x27;, &#x27;玩遊戲&#x27;]</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> * person: Object &#123;</span><br><span class="hljs-comment"> *     name: &#x27;Blueberry&#x27;,</span><br><span class="hljs-comment"> *     interest: [&#x27;泡咖啡&#x27;, &#x27;玩遊戲&#x27;]</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><p>這裡可以看到 <code>copy</code> 的第二層（<code>interest: ['閱讀', '玩遊戲']</code>）被修改了，結果連原本的 <code>person</code> 也一起變成’泡咖啡’，因為 <code>copy</code> 的第二層仍是指向與原物件相同的記憶體位置。</p><p>但是 <code>name</code> 這個值就不同了，<code>copy</code> 的第一層是有被淺層拷貝成功的。</p><h3 id="for-迴圈">for 迴圈</h3><p>for 迴圈是最土法煉鋼的方法，它也能達到淺拷貝的效果。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">const</span> b = [];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; a.length; i++) &#123;<br>  b.push(a[i]);<br>&#125;<br>b.push(<span class="hljs-number">4</span>);<br><span class="hljs-built_in">console</span>.log(a);<br><span class="hljs-built_in">console</span>.log(b);<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * [Output]</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * [1, 2, 3]</span><br><span class="hljs-comment"> * [1, 2, 3, 4]</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><h3 id="展開運算子">展開運算子</h3><p><a href="https://b-l-u-e-b-e-r-r-y.github.io/post/SpreadAndRestOperator/">展開運算子</a>是 ES6 新出的方法，應該是最方便的寫法了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">const</span> b = [ ...a ];<br>b.push(<span class="hljs-number">4</span>);<br><span class="hljs-built_in">console</span>.log(a);<br><span class="hljs-built_in">console</span>.log(b);<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * [Output]</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * [1, 2, 3]</span><br><span class="hljs-comment"> * [1, 2, 3, 4]</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><h2 id="深拷貝">深拷貝</h2><p>在不使用其他套件的情況下，目前 Javascript 的深拷貝只有 <code>JSON.parse()</code> + <code>JSON.stringify()</code> 的寫法。</p><h3 id="JSON-parse-JSON-stringify">JSON.parse(JSON.stringify())</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> person = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Blueberry&#x27;</span>,<br>    <span class="hljs-attr">interest</span>: [<span class="hljs-string">&#x27;閱讀&#x27;</span>, <span class="hljs-string">&#x27;玩遊戲&#x27;</span>]<br>&#125;;<br><br><span class="hljs-keyword">const</span> copy = <span class="hljs-built_in">JSON</span>.parse(<span class="hljs-built_in">JSON</span>.stringify(person)));<br><br>copy.name = <span class="hljs-string">&#x27;Strawberry&#x27;</span>;<br>copy.interest[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;泡咖啡&#x27;</span>;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;copy: &#x27;</span>, copy);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;person: &#x27;</span>, person);<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * [Output]</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * copy: Object &#123;</span><br><span class="hljs-comment"> *     name: &#x27;Strawberry&#x27;,</span><br><span class="hljs-comment"> *     interest: [&#x27;泡咖啡&#x27;, &#x27;玩遊戲&#x27;]</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> * person: Object &#123;</span><br><span class="hljs-comment"> *     name: &#x27;Blueberry&#x27;,</span><br><span class="hljs-comment"> *     interest: [&#x27;閱讀&#x27;, &#x27;玩遊戲&#x27;]</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Javascript</tag>
      
      <tag>w3HexSchool</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Javascript ES6 Promise</title>
    <link href="/post/Promise/"/>
    <url>/post/Promise/</url>
    
    <content type="html"><![CDATA[<p>Promise 是很適合用來處理非同步的方法，大多數情況是用來處理非同步事件或 Callback hell (回調地獄)。</p><h2 id="非同步調用">非同步調用</h2><p>例如 <code>getData()</code> 在 <code>api()</code> 還沒回傳值就想取得結果，就會出現 <code>undefined</code>。可以看看下面的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> api = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// 模擬等待 api 回傳的時間</span><br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">value</span>: <span class="hljs-number">1</span> &#125;;<br>    &#125;, <span class="hljs-number">2000</span>);<br>&#125;<br><br><span class="hljs-keyword">const</span> getData = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> data = api();<br>    <span class="hljs-built_in">console</span>.log(data);  <span class="hljs-comment">// undefined</span><br>&#125;<br><br>getData();<br></code></pre></td></tr></table></figure><p><code>setTimeout</code> 是 Javascript 中一種非同步的方法，它會等到指定時間過後才會執行裡面的程式碼，但與此同時，其他的程式碼一樣會繼續進行，<strong>不會等到 <code>setTimeout</code> 執行結束才繼續往下</strong>。</p><h2 id="使用-Promise-解決非同步調用">使用 Promise 解決非同步調用</h2><p>那麼該如何解決呢？這時候就可以使用 Promise。</p><p>建立 Promise 必須回傳 resolve(解決) 及 reject(拒絕)，當然只回傳 resolve 或 reject 也是可以的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> promise = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-comment">/* 任何條件 */</span>) &#123;<br>        resolve(<span class="hljs-string">&#x27;Success&#x27;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        reject(<span class="hljs-string">&#x27;Fail&#x27;</span>);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>定義 Promise 之後就可以呼叫它：<br><code>promise.then(fulfilledCallback, rejectedCallback)</code></p><p>如果剛剛回傳的結果是 resolve(解決)，則執行 <code>fulfilledCallback</code>，反之如果是回傳 reject(拒絕)，則執行 <code>rejectedCallback</code>。</p><p><strong>※ 這邊特別提一下，<code>rejectedCallback</code> 是可選的，不一定要使用它來處理錯誤，使用 <code>catch(rejectedCallback)</code> 也有一樣的效果，但這兩種寫法在其他情境下會產生差異，後面錯誤處理的部分會提到。</strong></p><p>下面這段程式碼會在 Promise 回傳 resolve 或 reject 之後才被執行，因此可以達到同步延遲的效果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">promise.then(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(res);  <span class="hljs-comment">// Success</span><br>&#125;, <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(err);  <span class="hljs-comment">// Fail</span><br>&#125;);<br><br><span class="hljs-comment">// 或</span><br>promise.then(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(res);  <span class="hljs-comment">// Success</span><br>&#125;).catch(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(err);  <span class="hljs-comment">// Fail</span><br>&#125;);<br></code></pre></td></tr></table></figure><p>學會 Promise 的基本用法後，就可以回到最上面的問題，如何等到 <code>api()</code> 回傳結果再取值呢？</p><p>改寫一下程式，在 <code>api()</code> 加入 Promise，並於 <code>getData()</code> 調用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> api = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// 模擬等待 api 回傳的時間</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            resolve(&#123; <span class="hljs-attr">value</span>: <span class="hljs-number">1</span> &#125;);<br>        &#125;, <span class="hljs-number">2000</span>);<br>    &#125;);<br>&#125;<br><br><span class="hljs-keyword">const</span> getData = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> data;<br>    api().then(<span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> &#123;<br>        data = result;<br>        <span class="hljs-built_in">console</span>.log(data);  <span class="hljs-comment">// Object &#123; value: 1 &#125;</span><br>    &#125;);<br>&#125;<br><br>getData();<br></code></pre></td></tr></table></figure><p>這樣就可以解決非同步調用的問題了。</p><h2 id="Callback-hell">Callback hell</h2><p>接下來看看 Callback hell 的問題，下面的例子是模擬取用 user、country、item 這三個不同的 api，而且必須取完 userApi 再取 countryApi，然後再取 itemApi：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> userApi = <span class="hljs-function">(<span class="hljs-params">callback</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        callback(&#123; <span class="hljs-attr">user</span>: [] &#125;);<br>    &#125;, <span class="hljs-number">1000</span>);<br>&#125;<br><br><span class="hljs-keyword">const</span> countryApi = <span class="hljs-function">(<span class="hljs-params">callback</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        callback(&#123; <span class="hljs-attr">country</span>: [] &#125;);<br>    &#125;, <span class="hljs-number">1000</span>);<br>&#125;<br><br><span class="hljs-keyword">const</span> itemApi = <span class="hljs-function">(<span class="hljs-params">callback</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        callback(&#123; <span class="hljs-attr">item</span>: [] &#125;);<br>    &#125;, <span class="hljs-number">1000</span>);<br>&#125;<br><br><span class="hljs-keyword">const</span> getData = <span class="hljs-function">() =&gt;</span> &#123;<br>    userApi(<span class="hljs-function">(<span class="hljs-params">userData</span>) =&gt;</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(userData);          <span class="hljs-comment">// Object &#123; user: [] &#125;</span><br>        countryApi(<span class="hljs-function">(<span class="hljs-params">countryData</span>) =&gt;</span> &#123;<br>            <span class="hljs-built_in">console</span>.log(countryData);   <span class="hljs-comment">// Object &#123; country: [] &#125;</span><br>            itemApi(<span class="hljs-function">(<span class="hljs-params">itemData</span>) =&gt;</span> &#123;<br>                <span class="hljs-built_in">console</span>.log(itemData);  <span class="hljs-comment">// Object &#123; item: [] &#125;</span><br>            &#125;);<br>        &#125;);<br>    &#125;);<br>&#125;<br><br>getData();<br></code></pre></td></tr></table></figure><p>這樣的寫法非常難讀和維護，如果再加入其他動作或錯誤處理，那真的是一坨超級難讀的程式碼了。</p><h2 id="使用-Promise-解決-Callback-hell">使用 Promise 解決 Callback hell</h2><p>將程式碼改寫如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> userApi = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            resolve(&#123; <span class="hljs-attr">user</span>: [] &#125;);<br>        &#125;, <span class="hljs-number">1000</span>);<br>    &#125;);<br>&#125;<br><br><span class="hljs-keyword">const</span> countryApi = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            resolve(&#123; <span class="hljs-attr">country</span>: [] &#125;);<br>        &#125;, <span class="hljs-number">1000</span>);<br>    &#125;);<br>&#125;<br><br><span class="hljs-keyword">const</span> itemApi = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            resolve(&#123; <span class="hljs-attr">item</span>: [] &#125;);<br>        &#125;, <span class="hljs-number">1000</span>);<br>    &#125;);<br>&#125;<br><br><span class="hljs-keyword">const</span> getData = <span class="hljs-function">() =&gt;</span> &#123;<br>    userApi().then(<span class="hljs-function">(<span class="hljs-params">userData</span>) =&gt;</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(userData);     <span class="hljs-comment">// Object &#123; user: [] &#125;</span><br>        <span class="hljs-keyword">return</span> countryApi();       <span class="hljs-comment">// 執行 countryApi()，因為函式回傳的是 Promise 物件，所以可以繼續用 then 串接</span><br>    &#125;).then(<span class="hljs-function">(<span class="hljs-params">countryData</span>) =&gt;</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(countryData);  <span class="hljs-comment">// Object &#123; country: [] &#125;</span><br>        <span class="hljs-keyword">return</span> itemApi();<br>    &#125;).then(<span class="hljs-function">(<span class="hljs-params">itemData</span>) =&gt;</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(itemData);     <span class="hljs-comment">// Object &#123; item: [] &#125;</span><br>    &#125;).catch(<span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;              <span class="hljs-comment">// 錯誤處理</span><br>        <span class="hljs-built_in">console</span>.log(e);<br>    &#125;);<br>&#125;<br><br>getData();<br></code></pre></td></tr></table></figure><p>Promise 可以使用串連的寫法，讓程式碼又更具可讀性，錯誤處理的寫法直觀又有規範，好 Promise 不用嗎。</p><h2 id="錯誤處理">錯誤處理</h2><p>錯誤處理主要有兩種寫法，分別為：</p><ul><li><code>new Promise.then(fulfilledCallback, rejectedCallback)</code></li><li><code>new Promise.then(fulfilledCallback).catch(rejectedCallback)</code></li></ul><p>那它們之間究竟有什麼不同呢？</p><p>我把中間的 countryApi 改成回傳 reject，看看不同的錯誤處理方式如何運行。</p><h3 id="new-Promise-then-fulfilledCallback-rejectedCallback">new Promise.then(fulfilledCallback, rejectedCallback)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> userApi = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            resolve(&#123; <span class="hljs-attr">user</span>: [] &#125;);<br>        &#125;, <span class="hljs-number">1000</span>);<br>    &#125;);<br>&#125;<br><br><span class="hljs-keyword">const</span> countryApi = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-comment">// 把這個 api 的回傳改成 reject</span><br>            reject(<span class="hljs-string">&#x27;Error!&#x27;</span>);<br>        &#125;, <span class="hljs-number">1000</span>);<br>    &#125;);<br>&#125;<br><br><span class="hljs-keyword">const</span> itemApi = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            resolve(&#123; <span class="hljs-attr">item</span>: [] &#125;);<br>        &#125;, <span class="hljs-number">1000</span>);<br>    &#125;);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 因為每一個 Promise 都有錯誤處理了，所以不寫 catch</span><br><span class="hljs-comment"> * 要寫 catch 也是可以的，這樣的話這個 catch 主要會抓到這邊 callback 的錯誤，而不是 reject 回傳的內容</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> getData = <span class="hljs-function">() =&gt;</span> &#123;<br>    userApi()<br>    .then(<span class="hljs-function">(<span class="hljs-params">userData</span>) =&gt;</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(userData);<br>        <span class="hljs-keyword">return</span> countryApi();<br>    &#125;, <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(err);<br>    &#125;)<br>    .then(<span class="hljs-function">(<span class="hljs-params">countryData</span>) =&gt;</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(countryData);<br>        <span class="hljs-keyword">return</span> itemApi();<br>    &#125;, <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(err);<br>    &#125;)<br>    .then(<span class="hljs-function">(<span class="hljs-params">itemData</span>) =&gt;</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(itemData);<br>    &#125;, <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(err);<br>    &#125;);<br>&#125;<br><br>getData();<br><br><span class="hljs-comment">// 結果：</span><br><span class="hljs-comment">// Object &#123;</span><br><span class="hljs-comment">//    user: []</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// &quot;Error!&quot;</span><br><span class="hljs-comment">// undefined</span><br></code></pre></td></tr></table></figure><p>這個範例成功取得第一個 userApi，之後在取得 countryApi 時出現錯誤，因此回傳 <code>&quot;Error!&quot;</code>。</p><p>那最後一行的 <code>undefined</code> 是怎麼回事？</p><p>是因為這種寫法的錯誤處理執行完後，還會繼續執行接下來的程式 <code>.then()</code> 的緣故。</p><p>也因為執行的是 rejectedCallback，rejectedCallback 的程式除了 <code>console.log(err)</code> 以外並沒有做任何事情，故而下一個 then 的 <code>console.log(itemData)</code> 就會出現 <code>undefined</code>。</p><p><strong>這個寫法可以避免中間有一個 api 出錯，後面就不會繼續執行的問題。</strong></p><h3 id="new-Promise-then-fulfilledCallback-catch-rejectedCallback">new Promise.then(fulfilledCallback).catch(rejectedCallback)</h3><p>這個寫法是將錯誤統一交給 catch 處理：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> getData = <span class="hljs-function">() =&gt;</span> &#123;<br>    userApi().then(<span class="hljs-function">(<span class="hljs-params">userData</span>) =&gt;</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(userData);<br>        <span class="hljs-keyword">return</span> countryApi();<br>    &#125;).then(<span class="hljs-function">(<span class="hljs-params">countryData</span>) =&gt;</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(countryData);<br>        <span class="hljs-keyword">return</span> itemApi();<br>    &#125;).then(<span class="hljs-function">(<span class="hljs-params">itemData</span>) =&gt;</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(itemData);<br>    &#125;).catch(<span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(e);<br>    &#125;);<br>&#125;<br><br><span class="hljs-comment">// 結果：</span><br><span class="hljs-comment">// Object &#123;</span><br><span class="hljs-comment">//    user: []</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// &quot;Error!&quot;</span><br></code></pre></td></tr></table></figure><p>咦？為什麼只到 <code>&quot;Error!&quot;</code> 就沒了？<code>itemApi</code> 的部分沒有執行？</p><p><strong>這是因為只要某部分回傳了 reject，就會進到 catch 的部分，中間的過程會直接跳過。</strong></p><p>但是如果在 catch 後面寫串連，還是可以繼續執行，只是一般很少人這樣使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> getData = <span class="hljs-function">() =&gt;</span> &#123;<br>    userApi().then(<span class="hljs-function">(<span class="hljs-params">userData</span>) =&gt;</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(userData);<br>        <span class="hljs-keyword">return</span> countryApi();<br>    &#125;).then(<span class="hljs-function">(<span class="hljs-params">countryData</span>) =&gt;</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(countryData);<br>        <span class="hljs-keyword">return</span> itemApi();<br>    &#125;).then(<span class="hljs-function">(<span class="hljs-params">itemData</span>) =&gt;</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(itemData);<br>    &#125;).catch(<span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(e);<br>    &#125;).then(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Keep going.&#x27;</span>);<br>    &#125;);<br>&#125;<br><br><span class="hljs-comment">// 結果：</span><br><span class="hljs-comment">// Object &#123;</span><br><span class="hljs-comment">//    user: []</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// &quot;Error!&quot;</span><br><span class="hljs-comment">// &quot;Keep going.&quot;</span><br></code></pre></td></tr></table></figure><h2 id="finally">finally</h2><p>還有一個方法是 <code>finally()</code>，它會在執行完 <code>then()</code> 和 <code>catch()</code> 後執行，確保無論是 fulfilled 或 rejected 都會執行某些程式碼的一種方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">Promise</span>.resolve(<span class="hljs-number">1</span>).then(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(value);<br>&#125;).catch(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(err);<br>&#125;).finally(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;finally&#x27;</span>);<br>&#125;);<br><br><span class="hljs-comment">// 1</span><br><span class="hljs-comment">// finally</span><br></code></pre></td></tr></table></figure><h2 id="其他寫法">其他寫法</h2><p>將 Promise 展開後可以看見下面的結構：</p><p><img src="/images/promise/04.jpg" alt=""></p><p>從這張圖中可以看見幾種 Promise 可用的函式，分別為：</p><ul><li>Promise.resolve</li><li>Promise.reject</li><li>Promise.all</li><li>Promise.race</li><li>Promise.allSettled</li></ul><h3 id="Promise-resolve">Promise.resolve</h3><p><code>Promise.resolve(value)</code></p><p>可以直接回傳一個 resolve 的 Promise。</p><h3 id="Promise-reject">Promise.reject</h3><p><code>Promise.reject(value)</code></p><p>可以直接回傳一個 reject 的 Promise。</p><h3 id="Promise-all">Promise.all</h3><p><code>Promise.all(array).then(fulfilledCallback, rejectedCallback)</code></p><p>完成全部的 Promise 後才會執行。</p><p><code>Promise.all</code> 函式需要放入陣列，陣列內容必須是 Promise。</p><p>如果 Promise 全部回傳 resolve，會執行 <code>fulfilledCallback</code>，回傳全部 resolve 值，並組成一個陣列。</p><p>反之，如果有任何一個回傳 reject 則執行 <code>rejectedCallback</code>，回傳第一個 reject 值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">Promise</span>.all([<br>    <span class="hljs-built_in">Promise</span>.resolve(<span class="hljs-number">1</span>),<br>    <span class="hljs-built_in">Promise</span>.resolve(<span class="hljs-number">2</span>),<br>    <span class="hljs-built_in">Promise</span>.resolve(<span class="hljs-number">3</span>)<br>]).then(<span class="hljs-function">(<span class="hljs-params">array</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(array);<br>&#125;, <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(err);<br>&#125;);<br><br><span class="hljs-comment">// [1, 2, 3]</span><br></code></pre></td></tr></table></figure><h3 id="Promise-race">Promise.race</h3><p><code>Promise.race(array).then(fulfilledCallback, rejectedCallback)</code></p><p>與 <code>Promise.all</code> 的寫法相同，但是它只接收第一個回傳的 Promise（不論 resolve 或 reject），有點類似賽跑，比賽誰先到終點。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">Promise</span>.all([<br>    <span class="hljs-built_in">Promise</span>.reject(<span class="hljs-number">1</span>),<br>    <span class="hljs-built_in">Promise</span>.resolve(<span class="hljs-number">2</span>),<br>    <span class="hljs-built_in">Promise</span>.resolve(<span class="hljs-number">3</span>)<br>]).then(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;resolve: &#x27;</span>, resolve);<br>&#125;, <span class="hljs-function">(<span class="hljs-params">reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;reject: &#x27;</span>, reject);<br>&#125;);<br><br><span class="hljs-comment">// reject: 1</span><br></code></pre></td></tr></table></figure><h3 id="Promise-allSettled">Promise.allSettled</h3><p><code>Promise.allSettled(array).then(callback))</code></p><p><code>Promise.allSettled</code> 只有在全部的 Promise 都完成後才會執行。</p><p>它會回傳一個陣列，裡面包含：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// resolve 時回傳</span><br>&#123;<br>    <span class="hljs-attr">status</span>: <span class="hljs-string">&quot;fulfilled&quot;</span>,<br>    <span class="hljs-attr">value</span>: <span class="hljs-string">&quot;resolve value&quot;</span><br>&#125;<br><br><span class="hljs-comment">// reject 時回傳</span><br>&#123;<br>    <span class="hljs-attr">status</span>: <span class="hljs-string">&quot;rejected&quot;</span>,<br>    <span class="hljs-attr">reason</span>: <span class="hljs-string">&quot;reject value&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>寫法與 <code>Promise.all</code> 及 <code>Promise.race</code> 大致相同，只是它不需要第二個 callback：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">Promise</span>.allSettled([<br>    <span class="hljs-built_in">Promise</span>.resolve(<span class="hljs-number">1</span>),<br>    <span class="hljs-built_in">Promise</span>.reject(<span class="hljs-number">2</span>)<br>]).then(<span class="hljs-function">(<span class="hljs-params">array</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(array);<br>&#125;);<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  [</span><br><span class="hljs-comment"> *      &#123; status: &quot;fulfilled&quot;, value: 1 &#125;</span><br><span class="hljs-comment"> *      &#123; status: &quot;rejected&quot;, reason: 2 &#125;</span><br><span class="hljs-comment"> *  ]</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><h2 id="Promise-的當前值與狀態">Promise 的當前值與狀態</h2><p>當前值與狀態分別指的是 <code>[[PromiseValue]]</code> 與 <code>[[PromiseStatus]]</code>。</p><p><code>[[PromiseValue]]</code> 指的是 resolve 或 reject 回傳的值。</p><p><code>[[PromiseStatus]]</code> 分為以下幾種狀態：</p><ul><li>resolved：表示成功</li><li>rejected：表示失敗</li><li>pending：表示尚未回傳 resolve 或 reject，<code>[[PromiseValue]]</code> 會被指定為 <code>undefined</code></li></ul>]]></content>
    
    
    <categories>
      
      <category>Javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Javascript</tag>
      
      <tag>w3HexSchool</tag>
      
      <tag>ES6</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>簡單整理 Git 常用指令</title>
    <link href="/post/GitCommand/"/>
    <url>/post/GitCommand/</url>
    
    <content type="html"><![CDATA[<h3 id="新增檔案-是全部新增的意思，也可以只新增部分檔案">新增檔案(.是全部新增的意思，也可以只新增部分檔案)</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">git <span class="hljs-builtin-name">add</span> .<br></code></pre></td></tr></table></figure><hr><h3 id="提交檔案">提交檔案</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">git</span> commit -m <span class="hljs-string">&quot;內容&quot;</span><br></code></pre></td></tr></table></figure><hr><h3 id="推送檔案">推送檔案</h3><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">git <span class="hljs-keyword">push</span><br></code></pre></td></tr></table></figure><hr><h3 id="拉取檔案">拉取檔案</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git pull</span><br></code></pre></td></tr></table></figure><hr><h3 id="Clone-遠端數據庫">Clone 遠端數據庫</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">git</span>位置<br></code></pre></td></tr></table></figure><hr><h3 id="查看目前分支">查看目前分支</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git branch</span><br></code></pre></td></tr></table></figure><hr><h3 id="新增分支">新增分支</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">git <span class="hljs-keyword">branch </span>分支名稱<br></code></pre></td></tr></table></figure><hr><h3 id="切換到該分支">切換到該分支</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">git</span> checkout 分支名稱<br></code></pre></td></tr></table></figure><hr><h3 id="強制回到和保存端一模一樣的檔案（慎用，檔案有異常時再使用）">強制回到和保存端一模一樣的檔案（慎用，檔案有異常時再使用）</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">git <span class="hljs-keyword">fetch</span> <span class="hljs-comment">--all</span><br>git <span class="hljs-keyword">reset</span> <span class="hljs-comment">--hard origin/master</span><br></code></pre></td></tr></table></figure><hr><h3 id="查詢所有做過的-git-動作，可查詢到每一個動作的編號">查詢所有做過的 git 動作，可查詢到每一個動作的編號</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">git <span class="hljs-built_in">ref</span>log<br></code></pre></td></tr></table></figure><hr><h3 id="回覆之前的某一個操作">回覆之前的某一個操作</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">git <span class="hljs-keyword">reset</span> 編號 <span class="hljs-comment">--hard</span><br></code></pre></td></tr></table></figure><hr><h3 id="使用-rebase-進行合併">使用 rebase 進行合併</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">git</span> rebase 分支名稱<br></code></pre></td></tr></table></figure><hr><h3 id="rebase-後回復">rebase 後回復</h3><p>有兩種方式，第一種方式必須先用 <code>git reflog</code> 查詢，dd1f0f8 是 rebase 前的一個動作編號：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">git</span> reset dd<span class="hljs-number">1</span>f<span class="hljs-number">0</span>f<span class="hljs-number">8</span> --hard<br></code></pre></td></tr></table></figure><p>第二種方式是使用 ORIG_HEAD：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">git <span class="hljs-keyword">reset</span> ORIG_HEAD <span class="hljs-comment">--hard </span><br></code></pre></td></tr></table></figure><hr><p>參考資料：</p><p><a href="https://www.youtube.com/watch?v=HeF7dwVyzow&amp;feature=emb_err_watch_on_yt">另一種合併方式（使用 rebase）｜高見龍</a></p><p><a href="https://w3c.hexschool.com/git/cfdbd310?fbclid=IwAR0cO3-A9voMoOPIA-qnZWbm2o7TNICwsJc4J0rnbZxCcNy8sBVs7NU9OmQ">Git &amp; GitHub 教學手冊｜六角學院</a></p>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>w3HexSchool</tag>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>比較運算子</title>
    <link href="/post/ComparisonOperators/"/>
    <url>/post/ComparisonOperators/</url>
    
    <content type="html"><![CDATA[<h2 id="請先參閱：運算子優先序">請先參閱：<a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Operators/Operator_Precedence">運算子優先序</a></h2><p>先來看一段程式碼：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span> &lt; <span class="hljs-number">2</span> &lt; <span class="hljs-number">1</span>);   <span class="hljs-comment">// 結果是 true</span><br></code></pre></td></tr></table></figure><p>以人類的邏輯來說，這絕對是錯的，但為什麼 JavaScript 會判定為 true 呢？</p><p>小於運算子的相依性是<strong>由左至右</strong>，程式會優先進行 <code>3 &lt; 2</code> 這部分的判定。於是會變成：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-literal">false</span> &lt; <span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><p>但是 false 和 1 並不是同一個型別，所以 JavaScript 會進行<strong>強制型轉</strong>。</p><p>如果你輸入下面這行程式碼，可以知道 false 轉成數字後的值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">Number</span>(<span class="hljs-literal">false</span>);   <span class="hljs-comment">// 結果是 0</span><br></code></pre></td></tr></table></figure><p>如此一來就變成了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">0</span> &lt; <span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><p>0 &lt; 1，無庸置疑的是 <code>true</code>。</p><p>其他例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">Number</span>(<span class="hljs-literal">undefined</span>);  <span class="hljs-comment">// 結果是 NaN（Not a Number），無法型轉成數字</span><br><span class="hljs-built_in">Number</span>(<span class="hljs-literal">null</span>);       <span class="hljs-comment">// 結果是 0</span><br><span class="hljs-built_in">Number</span>(!<span class="hljs-literal">null</span>);      <span class="hljs-comment">// 結果是 1</span><br></code></pre></td></tr></table></figure><hr><h2 id="請先參閱：等號的比較">請先參閱：<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness">等號的比較</a></h2><p>再來是 <code>==</code> 和 <code>===</code> 的區別。</p><p>為減少錯誤，建議從現在開始大部分時間都使用 <code>===</code>，除非故意要進行強制型轉。</p><p>以下例子使用 <code>==</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (<span class="hljs-literal">false</span> == <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-built_in">console</span>.log(Equal.);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(Not equal.);<br>&#125;<br></code></pre></td></tr></table></figure><p>結果會是 Equal，因為 JavaScript 強制把 false 型轉成數字，故 <code>0 == 0</code> 結果是 true。</p><p>以下例子使用 <code>===</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (<span class="hljs-literal">false</span> === <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-built_in">console</span>.log(Equal.);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(Not equal.);<br>&#125;<br></code></pre></td></tr></table></figure><p>結果會是 Not equal，<strong>使用 === JavaScript 就不會進行強制型轉</strong>，在兩個值是不同型態的情況下，結果會是 false。</p>]]></content>
    
    
    <categories>
      
      <category>Javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Javascript</tag>
      
      <tag>w3HexSchool</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Destructuring 解構賦值</title>
    <link href="/post/Destructuring/"/>
    <url>/post/Destructuring/</url>
    
    <content type="html"><![CDATA[<p>解構賦值可以用在陣列或物件，可以提取特定的值成獨立變數。</p><h1>1. Array Destructuring</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> numbers = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br>[num1, num2] = numbers;<br><br><span class="hljs-built_in">console</span>.log(num1, num2);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    Output:</span><br><span class="hljs-comment">    1</span><br><span class="hljs-comment">    2</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>如果只想要提取 1 和 3 的值，只要在左邊陣列的中間部分空一格即可：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> numbers = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">const</span> [num1, , num3] = numbers;<br><br><span class="hljs-built_in">console</span>.log(num1, num3);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    Output:</span><br><span class="hljs-comment">    1</span><br><span class="hljs-comment">    3</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>也可以使用其餘運算子接下剩下的變數：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> numbers = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">const</span> [num, ...nums] = numbers;<br><br><span class="hljs-built_in">console</span>.log(num, nums);<br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    Output:</span><br><span class="hljs-comment">    1</span><br><span class="hljs-comment">    [2, 3]</span><br><span class="hljs-comment">*/</span> <br></code></pre></td></tr></table></figure><h1>2. Object Destructuring</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> &#123; <span class="hljs-attr">name</span>: n, <span class="hljs-attr">age</span>: a &#125; = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Blueberry&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">24</span><br>&#125;<br><br><span class="hljs-built_in">console</span>.log(n);  <span class="hljs-comment">// Blueberry</span><br><span class="hljs-built_in">console</span>.log(a);  <span class="hljs-comment">// 24</span><br></code></pre></td></tr></table></figure><p>物件解構賦值也同樣可以使用展開運算子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> &#123; name, ...others &#125; = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Blueberry&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">24</span>,<br>    <span class="hljs-attr">color</span>: blue<br>&#125;<br><br><span class="hljs-built_in">console</span>.log(name, others);<br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    Output: Blueberry</span><br><span class="hljs-comment">    Object &#123;</span><br><span class="hljs-comment">        age: 24,</span><br><span class="hljs-comment">        color: &quot;blue&quot;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Javascript</tag>
      
      <tag>w3HexSchool</tag>
      
      <tag>ES6</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS 排版神器 Flexbox</title>
    <link href="/post/Flexbox/"/>
    <url>/post/Flexbox/</url>
    
    <content type="html"><![CDATA[<p>在 Flexbox 中，部分屬性只能用於父元素，部分只能用於子元素。<br><img src="/images/flexbox/fathernchildren.jpg" alt=""></p><ul><li><h4 id="父元素屬性">父元素屬性</h4><ul><li>display</li><li>flex-direction</li><li>flex-wrap</li><li>justify-content</li><li>align-items</li><li>align-content</li></ul></li><li><h4 id="子元素屬性">子元素屬性</h4><ul><li>align-self</li><li>order</li><li>flex<ul><li>flex-grow</li><li>flex-shrink</li><li>flex-basis</li></ul></li></ul></li></ul><h1>父元素屬性</h1><h2 id="display">display</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">display</span>: flex | inline-flex;<br></code></pre></td></tr></table></figure><p>要使用 Flexbox 必須先定義一個父元素容器，並於父元素定義 <code>display</code> 屬性為 <code>flex</code> 或 <code>inline-flex</code>。</p><ul><li><code>flex</code>：Flexbox 的常用屬性，後方的元素會換行</li><li><code>inline-flex</code>：類似於 <code>inline-block</code> 加 <code>flex</code>，在後方的元素不會換行</li></ul><p>範例程式碼：</p><p class="codepen" data-height="265" data-theme-id="default" data-default-tab="css,result" data-user="Priscilla_Lin" data-slug-hash="LYVpaLd" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="flex vs inline-flex">  <span>See the Pen <a href="https://codepen.io/Priscilla_Lin/pen/LYVpaLd">  flex vs inline-flex</a> by Priscilla Lin (<a href="https://codepen.io/Priscilla_Lin">@Priscilla_Lin</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><hr><h2 id="flex-direction">flex-direction</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">flex-direction</span>: row&lt;default&gt; | row-reverse | column | column-reverese;<br></code></pre></td></tr></table></figure><p><code>flex-direction</code> 可以指定元素的排列方式。</p><ul><li><code>row</code>：預設值，橫向排列</li><li><code>column</code>：直向排列</li><li><code>row-reverse</code>：橫向反向排列</li><li><code>column-reverse</code>：直向反向排列</li></ul><p>範例程式碼：</p><p class="codepen" data-height="265" data-theme-id="default" data-default-tab="html,result" data-user="Priscilla_Lin" data-slug-hash="JjdYgWx" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="flex-direction">  <span>See the Pen <a href="https://codepen.io/Priscilla_Lin/pen/JjdYgWx">  flex-direction</a> by Priscilla Lin (<a href="https://codepen.io/Priscilla_Lin">@Priscilla_Lin</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><hr><h2 id="flex-wrap">flex-wrap</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">flex-wrap</span>: nowrap&lt;default&gt; | wrap | wrap-reverse;<br></code></pre></td></tr></table></figure><p>當多個子元素超過父元素的寬度時，<code>flex-wrap</code> 可以決定是否將子元素換行。</p><ul><li><code>nowrap</code>：預設值，不換行，子元素會縮短以符合父元素的寬度</li><li><code>wrap</code>：換行，超出父元素寬度的子元素會換到下一行</li><li><code>wrap-reverse</code>：反向換行，也就是各行的順序會顛倒</li></ul><p>範例程式碼：</p><p class="codepen" data-height="265" data-theme-id="default" data-default-tab="html,result" data-user="Priscilla_Lin" data-slug-hash="zYGvgEm" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="flex-wrap">  <span>See the Pen <a href="https://codepen.io/Priscilla_Lin/pen/zYGvgEm">  flex-wrap</a> by Priscilla Lin (<a href="https://codepen.io/Priscilla_Lin">@Priscilla_Lin</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><hr><h2 id="justify-content">justify-content</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">justify-content</span>: flex-start&lt;default&gt; | flex-end | center | space-between | space-around;<br></code></pre></td></tr></table></figure><p><code>justify-content</code> 決定水平對齊的位置。</p><ul><li><code>flex-start</code>：預設值，靠左對齊</li><li><code>flex-end</code>：靠右對齊</li><li><code>center</code>：置中對齊</li><li><code>space-between</code>：平均分配，左右貼齊父元素</li><li><code>space-around</code>：平均分配，類似 margin 的概念<br><img src="/images/flexbox/jc-space-around.jpg" alt=""></li><li><code>space-evenly</code>：平均分配，每個間距都是相同寬度<br><img src="/images/flexbox/jc-space-evenly.jpg" alt=""></li></ul><p>範例程式碼：</p><p class="codepen" data-height="265" data-theme-id="default" data-default-tab="html,result" data-user="Priscilla_Lin" data-slug-hash="dyoGPwP" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="justify-content">  <span>See the Pen <a href="https://codepen.io/Priscilla_Lin/pen/dyoGPwP">  justify-content</a> by Priscilla Lin (<a href="https://codepen.io/Priscilla_Lin">@Priscilla_Lin</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><hr><h2 id="align-items">align-items</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">align-items</span>: flex-start | flex-end | center | stretch&lt;default&gt; | baseline;<br></code></pre></td></tr></table></figure><p><code>align-items</code> 決定垂直對齊的位置。</p><ul><li><code>flex-start</code>：靠上方對齊</li><li><code>flex-end</code>：靠下方對齊</li><li><code>center</code>：置中對齊</li><li><code>stretch</code>：預設值，所有元素撐開與父元素同高</li><li><code>baseline</code>：依元素的基準線對齊<br><img src="/images/flexbox/ac-baseline.jpg" alt=""></li></ul><p>範例程式碼：</p><p class="codepen" data-height="265" data-theme-id="default" data-default-tab="html,result" data-user="Priscilla_Lin" data-slug-hash="abOdKwb" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="align-items">  <span>See the Pen <a href="https://codepen.io/Priscilla_Lin/pen/abOdKwb">  align-items</a> by Priscilla Lin (<a href="https://codepen.io/Priscilla_Lin">@Priscilla_Lin</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><hr><h2 id="align-content">align-content</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">align-content</span>: flex-start | flex-end | center | stretch&lt;default&gt; | space-between | space-around;<br></code></pre></td></tr></table></figure><p><code>align-content</code> 針對多行的元素進行排序。</p><ul><li><code>flex-start</code>：靠上方對齊</li><li><code>flex-end</code>：靠下方對齊</li><li><code>center</code>：置中對齊</li><li><code>stretch</code>：預設值，所有元素撐開與父元素同高</li><li><code>space-between</code>：平均分配，上下貼齊父元素</li><li><code>space-around</code>：平均分配，類似 margin 概念</li></ul><p>範例程式碼：</p><p class="codepen" data-height="265" data-theme-id="default" data-default-tab="html,result" data-user="Priscilla_Lin" data-slug-hash="MWwKXvx" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="align-content">  <span>See the Pen <a href="https://codepen.io/Priscilla_Lin/pen/MWwKXvx">  align-content</a> by Priscilla Lin (<a href="https://codepen.io/Priscilla_Lin">@Priscilla_Lin</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><hr><h1>子元素屬性</h1><h2 id="align-self">align-self</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">align-self</span>: flex-start | flex-end | center | stretch | baseline;<br></code></pre></td></tr></table></figure><p><code>align-self</code> 針對各別子元素進行排序，不受其他影響。</p><ul><li><code>flex-start</code>：靠上方對齊</li><li><code>flex-end</code>：靠下方對齊</li><li><code>center</code>：置中對齊</li><li><code>stretch</code>：子元素撐開與父元素同高</li><li><code>baseline</code>：依元素的基準線對齊</li></ul><p>這邊我直接拿上面的 <code>align-items</code> 的範例來改，可以看到 2 號橘色方塊被我設定為 <code>align-center: center</code>，所以不管怎麼排序，橘色方塊都會垂直置中。</p><p>範例程式碼：</p><p class="codepen" data-height="265" data-theme-id="default" data-default-tab="html,result" data-user="Priscilla_Lin" data-slug-hash="ExjPjYB" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="align-self">  <span>See the Pen <a href="https://codepen.io/Priscilla_Lin/pen/ExjPjYB">  align-self</a> by Priscilla Lin (<a href="https://codepen.io/Priscilla_Lin">@Priscilla_Lin</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><hr><h2 id="order">order</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">order</span>: &lt;number&gt;;<br></code></pre></td></tr></table></figure><p><code>order</code> 可以決定子元素的排序順序，只能給定數字。</p><p>範例程式碼：</p><p class="codepen" data-height="265" data-theme-id="default" data-default-tab="css,result" data-user="Priscilla_Lin" data-slug-hash="NWqxOby" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="order">  <span>See the Pen <a href="https://codepen.io/Priscilla_Lin/pen/NWqxOby">  order</a> by Priscilla Lin (<a href="https://codepen.io/Priscilla_Lin">@Priscilla_Lin</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><hr><h2 id="flex">flex</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">flex</span>: &lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;;<br></code></pre></td></tr></table></figure><p><code>flex</code> 是由三個值組成，如果只給定一個值，則是給定 <code>flex-grow</code>。</p><h3 id="flex-grow">flex-grow</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">flex-grow</span>: &lt;number&gt;;<br></code></pre></td></tr></table></figure><p>當子元素的總寬度<strong>不超過</strong>父元素時，<code>flex-grow</code> 會分配剩餘的空間給特定子元素。<br><code>flex-grow</code> 的預設值為 0，設定 1 以上的值會進行彈性變化。</p><p>範例程式碼：</p><p class="codepen" data-height="265" data-theme-id="default" data-default-tab="css,result" data-user="Priscilla_Lin" data-slug-hash="poJgMoN" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="flex-grow">  <span>See the Pen <a href="https://codepen.io/Priscilla_Lin/pen/poJgMoN">  flex-grow</a> by Priscilla Lin (<a href="https://codepen.io/Priscilla_Lin">@Priscilla_Lin</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><hr><h3 id="flex-shrink">flex-shrink</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">flex-shrink</span>: &lt;number&gt;;<br></code></pre></td></tr></table></figure><p>當子元素的總寬度<strong>超過</strong>父元素時，<code>flex-shrink</code> 會將特定子元素的寬度依比例縮減。<br><code>flex-shrink</code> 的預設值為 1，設為 0 的話不會進行彈性變化。</p><p>範例程式碼：</p><p class="codepen" data-height="265" data-theme-id="default" data-default-tab="css,result" data-user="Priscilla_Lin" data-slug-hash="zYGqOvb" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="flex-shrink">  <span>See the Pen <a href="https://codepen.io/Priscilla_Lin/pen/zYGqOvb">  flex-shrink</a> by Priscilla Lin (<a href="https://codepen.io/Priscilla_Lin">@Priscilla_Lin</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><hr><h3 id="flex-basis">flex-basis</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">flex-basis</span>: &lt;number&gt;;<br></code></pre></td></tr></table></figure><p><code>flex-basis</code> 會指定子元素在主軸 (main axis) 上的初始大小。</p><p><code>flex-direction: row</code> 為更改子元素寬度，反之 <code>flex-direction: column</code> 則更改子元素高度。</p><p><code>flex-basis</code> 的預設值為 0，也可以設定為 auto，表示以子元素自己的大小為基準。</p><p>範例程式碼：</p><p class="codepen" data-height="265" data-theme-id="default" data-default-tab="css,result" data-user="Priscilla_Lin" data-slug-hash="BaNKBjZ" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="flex-basis">  <span>See the Pen <a href="https://codepen.io/Priscilla_Lin/pen/BaNKBjZ">  flex-basis</a> by Priscilla Lin (<a href="https://codepen.io/Priscilla_Lin">@Priscilla_Lin</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>w3HexSchool</tag>
      
      <tag>CSS</tag>
      
      <tag>Flexbox</tag>
      
      <tag>RWD</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React Children 屬性</title>
    <link href="/post/ReactChildren/"/>
    <url>/post/ReactChildren/</url>
    
    <content type="html"><![CDATA[<h1>介紹</h1><p>使用組件時，大多數都是這樣寫：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;Component /&gt;<br></code></pre></td></tr></table></figure><p>但我們其實可以在組件中寫入其他內容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;Component&gt;<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Hello World!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>&lt;/Component&gt;<br></code></pre></td></tr></table></figure><p>除了在組件中寫入內容以外，組件本身也要加入 <code>props.children</code> 的屬性才會出現內容，如果沒有寫入任何內容，則 <code>props.children</code> 返回 null。</p><p>App.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> React, &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> Card <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Card&#x27;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> (<br>            <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Card</span>&gt;</span></span><br><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello World!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">Card</span>&gt;</span></span><br>        );<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> App;<br></code></pre></td></tr></table></figure><p>Card.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> Card = <span class="hljs-function">(<span class="hljs-params">props</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> (<br>        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">            &#123;props.children&#125;</span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Card;<br></code></pre></td></tr></table></figure><p>網頁呈現：<br><img src="/images/react-children/1.png" alt=""></p><hr><h1>陣列處理</h1><h2 id="React-Children-map">React.Children.map</h2><p>除了文字以外，children 也可以傳遞陣列，這邊我們使用 React 提供的方法 <code>React.Children.map</code> 來處理資料。</p><p>App.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> (<br>            <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Card</span>&gt;</span></span><br><span class="xml">                &#123;</span><br><span class="xml">                    function printData() &#123;</span><br><span class="xml">                        return [&#x27;Apple&#x27;, &#x27;Orange&#x27;, &#x27;Banana&#x27;];</span><br><span class="xml">                    &#125;()</span><br><span class="xml">                &#125;</span><br><span class="xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">Card</span>&gt;</span></span><br>        );<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Card.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> Card = <span class="hljs-function">(<span class="hljs-params">props</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> (<br>        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">            &#123;</span><br><span class="xml">                React.Children.map(props.children,</span><br><span class="xml">                    (child, i) =&gt; &#123;</span><br><span class="xml">                        return <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;child&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>;</span><br><span class="xml">                    &#125;</span><br><span class="xml">                )</span><br><span class="xml">            &#125;</span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>&#125;<br></code></pre></td></tr></table></figure><p>網頁呈現：</p><p><img src="/images/react-children/2.png" alt=""></p><h2 id="React-Children-forEach">React.Children.forEach</h2><p>與 <code>React.Children.map</code> 的使用方式相同，但是不會回傳陣列。</p><hr><h1>Child 數量計算</h1><h2 id="React-Children-count">React.Children.count</h2><p>這個方法用來計算 child 的數量，舉例來說：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;Component&gt;<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Hello World!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Hello World!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Hello World!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>&lt;/Component&gt;<br></code></pre></td></tr></table></figure><p>裡面包含了三個 <code>&lt;p&gt;Hello World!&lt;/p&gt;</code>，所以數量 = 3。</p><p>App.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> (<br>            <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Card</span>&gt;</span></span><br><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我是第一個child<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我是第二個child<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我是第三個child<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">Card</span>&gt;</span></span><br>        );<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Card.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> Card = <span class="hljs-function">(<span class="hljs-params">props</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> (<br>        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">            child 數量：&#123; React.Children.count(props.children) &#125;</span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>&#125;<br></code></pre></td></tr></table></figure><p>網頁呈現：<br><img src="/images/react-children/3.png" alt=""></p><hr><h1>只呈現一個 Child</h1><h2 id="React-Children-only">React.Children.only</h2><p>這個方法是讓組件只呈現一個 child，如果 children 不只一個 child 將會報錯：</p><p><img src="/images/react-children/4.png" alt=""></p><p>App.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> (<br>            <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Card</span>&gt;</span></span><br><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我是唯一的child<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">Card</span>&gt;</span></span><br>        );<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Card.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> Card = <span class="hljs-function">(<span class="hljs-params">props</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> (<br>        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">            &#123; React.Children.only(props.children) &#125;</span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>&#125;<br></code></pre></td></tr></table></figure><p>網頁呈現：<br><img src="/images/react-children/5.png" alt=""></p><hr><h1>將 Child 轉成陣列</h1><h2 id="React-Children-toArray">React.Children.toArray</h2><p><code>React.Children.toArray</code> 方法會將 child 轉成一個扁平的陣列，並對每個 child 指定一個 key。</p><p>下面示範用這個方法將每個 child 數字以小到大排序：</p><p>App.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> (<br>            <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Card</span>&gt;</span></span><br><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>196<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>165<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>178<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">Card</span>&gt;</span></span><br>        );<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Card.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> Card = <span class="hljs-function">(<span class="hljs-params">props</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> child = React.Children.toArray(props.children);<br>    child = child.sort(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> a.props.children &gt; b.props.children ? <span class="hljs-number">1</span> : -<span class="hljs-number">1</span>;<br>    &#125;);<br><br>    <span class="hljs-keyword">return</span> (<br>        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">            &#123;child&#125;</span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>&#125;<br></code></pre></td></tr></table></figure><p>網頁呈現：<br><img src="/images/react-children/6.png" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Javascript</tag>
      
      <tag>w3HexSchool</tag>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>展開運算子(Spread Operator)與其餘運算子(Rest Operator)</title>
    <link href="/post/SpreadAndRestOperator/"/>
    <url>/post/SpreadAndRestOperator/</url>
    
    <content type="html"><![CDATA[<p>這兩種運算子的寫法都是 <code>...</code>，對，你沒看錯，就是三個點！</p><p>接下來來實際說明使用情境：</p><h1>1. 展開運算子 (Spread Operator)</h1><p>用來將舊的陣列或物件複製到新的陣列或物件中，算是淺拷貝 (Shallow Copy) 的一種。</p><p>陣列範例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> numbers = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">const</span> newNumbers = [...number, <span class="hljs-number">4</span>];<br><br><span class="hljs-built_in">console</span>.log(newNumbers);<br><br><span class="hljs-comment">/* Output:</span><br><span class="hljs-comment">   [1, 2, 3, 4] */</span><br></code></pre></td></tr></table></figure><p>物件範例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> person = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Blueberry&#x27;</span><br>&#125;;<br><br><span class="hljs-keyword">const</span> newPerson = &#123;<br>    ...person,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">24</span><br>&#125;;<br><br><span class="hljs-built_in">console</span>.log(newPerson);<br><br><span class="hljs-comment">/* Output:</span><br><span class="hljs-comment">   &#123;</span><br><span class="hljs-comment">       age: 24,</span><br><span class="hljs-comment">       name: &#x27;Blueberry&#x27;</span><br><span class="hljs-comment">   &#125; */</span><br></code></pre></td></tr></table></figure><h1>2. 其餘運算子 (Rest Operator)</h1><p>將不確定數量的參數視為一個陣列。</p><p>範例示範將多個數字傳入函式，並用 filter 找出 args 陣列中等於 1 的數字：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> equalOne = <span class="hljs-function">(<span class="hljs-params">...args</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> args.filter(<span class="hljs-function"><span class="hljs-params">el</span> =&gt;</span> el === <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-built_in">console</span>.log(equalOne(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>));<br><br><span class="hljs-comment">/* Output:</span><br><span class="hljs-comment">   [1] */</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Javascript</tag>
      
      <tag>ES6</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 bind、call、apply 改變 this 指向的對象</title>
    <link href="/post/BindCallApply/"/>
    <url>/post/BindCallApply/</url>
    
    <content type="html"><![CDATA[<h1>介紹</h1><p>如果想要改變 this 指向的對象，可以透過 bind、call、apply 這三個 method 辦到。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> person = &#123;<br>   <span class="hljs-attr">userName</span>: <span class="hljs-string">&#x27;Blueberry&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>接著 create 一個函式來呼叫 person 的 userName：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">callName</span>(<span class="hljs-params"></span>) </span>&#123;<br>   <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Hello &#x27;</span> + <span class="hljs-built_in">this</span>.userName);<br>&#125;<br></code></pre></td></tr></table></figure><p>呼叫 callName：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">callName();<br><br><span class="hljs-comment">/* Output:</span><br><span class="hljs-comment">   Hello undefined */</span><br></code></pre></td></tr></table></figure><p>因為 callName() 函式中的 this 指向的是 global object（也就是 Window 物件），所以這時候我們希望把 callName() 的 this 指向 person 這個對象，可以使用以下方法：</p><h2 id="bind">bind</h2><p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Function/bind">MDN</a><br><em>function.bind(thisArg[, arg1[, arg2[, …]]])</em></p><p>bind 和其他兩個方法（call、apply）的不同有兩點：</p><ol><li>bind 是創造一個函式物件的拷貝，不會執行函式，因此 bind 之後還要再另外寫執行函式的動作；而 call、apply 是直接執行函式。</li><li>bind 後面傳入的參數值<strong>會設定為拷貝函式的永久參數值</strong>，之後執行拷貝函式時，無論怎麼給予參數都沒有用；而 call、apply 則是單純給予參數，像一般呼叫函式那樣。</li></ol><p>我們先單純就第一點來說明，示範最基本的 bind 怎麼寫。</p><p>第一種寫法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">callName.bind(person)();<br><br><span class="hljs-comment">// 也等於</span><br><span class="hljs-comment">// const callFunction = callName.bind(person);  // 創造函式物件的拷貝</span><br><span class="hljs-comment">// callFunction();  // 執行函式</span><br><br><span class="hljs-comment">/* Output:</span><br><span class="hljs-comment">   Hello Blueberry */</span><br></code></pre></td></tr></table></figure><p>第二種寫法，直接寫在函式表示式後面也可以：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> callName = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>   <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Hello &#x27;</span> + <span class="hljs-built_in">this</span>.userName);<br>&#125;.bind(person);<br><br>callName();<br><br><span class="hljs-comment">/* Output:</span><br><span class="hljs-comment">   Hello Blueberry */</span><br></code></pre></td></tr></table></figure><p>接下來針對第二點來說明。先來改寫一下 callName 函式，加入兩個 arguments。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">callName</span>(<span class="hljs-params">age, interest</span>) </span>&#123;<br>   <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Hello &#x27;</span> + <span class="hljs-built_in">this</span>.userName);<br>   <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Your age is &#x27;</span> + age);<br>   <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Your interest is &#x27;</span> + interest);<br>&#125;<br></code></pre></td></tr></table></figure><p>接著我們除了要用 bind 將 this 指向 person 之外，還要給予 age 和 interest 這兩個參數。</p><p>這邊有兩種做法：單純給定參數，或綁定永久參數值。</p><h3 id="單純給定參數">單純給定參數</h3><p>要單純給定參數的話，像一般執行函式那樣，在執行函式時再給予參數就可以了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> callFunction = callName.bind(person);<br>callFunction(<span class="hljs-number">24</span>, <span class="hljs-string">&#x27;Reading books&#x27;</span>);<br><br><span class="hljs-comment">/* Output:</span><br><span class="hljs-comment">   Hello Blueberry</span><br><span class="hljs-comment">   Your age is 24</span><br><span class="hljs-comment">   Your interest is Reading books */</span><br></code></pre></td></tr></table></figure><h3 id="綁定永久參數值">綁定永久參數值</h3><p>如果將參數放在 bind 中，這個函式拷貝物件的參數值就會永遠被固定住。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> callFunction = callName.bind(person, <span class="hljs-number">24</span>, <span class="hljs-string">&#x27;Reading books&#x27;</span>);<br>callFunction(<span class="hljs-number">30</span>, <span class="hljs-string">&#x27;Playing games&#x27;</span>);  <span class="hljs-comment">// 這邊無論再怎麼給參數都沒用</span><br><br><span class="hljs-comment">/* Output:</span><br><span class="hljs-comment">   Hello Blueberry</span><br><span class="hljs-comment">   Your age is 24</span><br><span class="hljs-comment">   Your interest is Reading books */</span><br></code></pre></td></tr></table></figure><h2 id="call">call</h2><p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Function/call">MDN</a><br><em>function.call(this, arg1, arg2…, argn)</em></p><p>call 和 bind 不同，它會直接執行函式，後面給的參數也不會被固定住。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">callName.call(person, <span class="hljs-number">24</span>, <span class="hljs-string">&#x27;Reading books&#x27;</span>);<br><br><span class="hljs-comment">/* Output:</span><br><span class="hljs-comment">   Hello Blueberry</span><br><span class="hljs-comment">   Your age is 24</span><br><span class="hljs-comment">   Your interest is Reading books */</span><br></code></pre></td></tr></table></figure><h2 id="apply">apply</h2><p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Function/apply">MDN</a><br><em>function.apply(this, [arg1, arg2…, argn])</em></p><p>apply 的寫法跟 call 很相近，與 call 不同的是，後面的參數需要使用陣列傳遞，適合搭配 arguments 運用在算數的函式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">callName.apply(person, [<span class="hljs-number">24</span>, <span class="hljs-string">&#x27;Reading books&#x27;</span>]);<br><br><span class="hljs-comment">/* Output:</span><br><span class="hljs-comment">   Hello Blueberry</span><br><span class="hljs-comment">   Your age is 24</span><br><span class="hljs-comment">   Your interest is Reading books */</span><br></code></pre></td></tr></table></figure><h1>使用情境</h1><h2 id="function-borrowing">function borrowing</h2><p>function borrowing 就是借別人函式中的方法來用的意思，下面示範 somebody 借用 person 的 getUserName 方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> person = &#123;<br>   <span class="hljs-attr">userName</span>: <span class="hljs-string">&#x27;Blueberry&#x27;</span>,<br>   <span class="hljs-attr">getUserName</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.userName);<br>   &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> somebody = &#123;<br>   <span class="hljs-attr">userName</span>: <span class="hljs-string">&#x27;Fan&#x27;</span><br>&#125;<br><br>person.getUserName.call(somebody);  <span class="hljs-comment">// Fan</span><br><br><span class="hljs-comment">// or</span><br><span class="hljs-comment">// person.getUserName.apply(somebody);</span><br><span class="hljs-comment">// or</span><br><span class="hljs-comment">// const newUser = person.getUserName.bind(somebody);</span><br><span class="hljs-comment">// newUser();</span><br></code></pre></td></tr></table></figure><h2 id="function-currying">function currying</h2><p>function currying 的定義為<strong>建立一個函式的拷貝，並設定預設的參數</strong>，這在數學運算下很有用。下面我們就利用 bind 的特性來完成 function currying。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> mutiply = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) </span>&#123;<br>   <span class="hljs-keyword">return</span> a * b;<br>&#125;<br><br><span class="hljs-keyword">const</span> mutiplyByTwo = mutiply.bind(<span class="hljs-built_in">this</span>, <span class="hljs-number">2</span>);<br><span class="hljs-built_in">console</span>.log(mutiplyByTwo(<span class="hljs-number">4</span>));  <span class="hljs-comment">// 8</span><br></code></pre></td></tr></table></figure><p>上面我們建立了一個函式 <code>mutiply(a, b)</code>，並用 bind 建立函式物件拷貝 <code>mutiplyByTwo()</code>。</p><p><code>mutiply.bind(this, 2)</code> 這邊的 this 並不重要，因為函式裡沒有使用到 this。而後面的 2 則是永久綁定了參數 a。</p><p>為了讓程式碼比較好理解，這邊將上面那段程式碼拆解，它也等於：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> mutiply = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">b</span>) </span>&#123;<br>   <span class="hljs-keyword">const</span> a = <span class="hljs-number">2</span>;<br>   <span class="hljs-keyword">return</span> a * b;<br>&#125;<br><br><span class="hljs-keyword">const</span> mutiplyByTwo = mutiply.bind(<span class="hljs-built_in">this</span>);<br><span class="hljs-built_in">console</span>.log(mutiplyByTwo(<span class="hljs-number">4</span>));  <span class="hljs-comment">// 8</span><br></code></pre></td></tr></table></figure><hr><p>參考資料：<br><a href="https://www.udemy.com/course/javascriptjs/">《JavaScript 全攻略：克服 JS 的奇怪部分》</a></p>]]></content>
    
    
    <categories>
      
      <category>Javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>var、let、const 的區別</title>
    <link href="/post/ES6variable/"/>
    <url>/post/ES6variable/</url>
    
    <content type="html"><![CDATA[<h2 id="var-變數">var 變數</h2><p>宣告時可以不給資料，資料可更動，範圍是函式作用域 (function scope)</p><h2 id="let-變數">let 變數</h2><p>宣告時可以不給資料，資料可更動，範圍是區塊作用域 (block scope)</p><h2 id="const-常數">const 常數</h2><p>宣告時一定要給資料，資料不可變動，範圍是區塊作用域 (block scope)</p><h2 id="差異比較">差異比較</h2><table><thead><tr><th>名稱</th><th>類型</th><th>宣告時不給資料</th><th>資料變動</th><th>範圍</th></tr></thead><tbody><tr><td>var</td><td>變數</td><td>O</td><td>O</td><td>函式作用域</td></tr><tr><td>let</td><td>變數</td><td>O</td><td>O</td><td>區塊作用域</td></tr><tr><td>const</td><td>常數</td><td>X</td><td>X</td><td>區塊作用域</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Javascript</tag>
      
      <tag>ES6</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
